#define usage "\nNAME\n\
	getdonutstats - compute shape statistics for out of focus images\n\
\n\
SYNOPSIS\n\
	getdonutstats [-s nbins] [-m] [-f maskfactor] [-M] [-g] [-u] mmax\n\
\n\
DESCRIPTION\n\
	getdonutstats reads a FITS file containing one or more postage stamp\n\
	images from stdin and computes shape statistics which it sends to stdout\n\
	as a lc-formal calalog.\n\
\n\
	With -s option, we read getdonutstats output and synthesise the Fourier\n\
	statistics with nbins bins in azimuth\n\
\n\
	With -m option we output the input image with the regions outside a simple\n\
	estimate of the boundary of the donut.  Use a maskfactor greater than\n\
	unity to expand the non-masked area.\n\
\n\
	With -M option we output a visualisation of the model.\n\
\n\
	By default we make a 3-component measurement using the flux; flux\n\
	times radius; and flux squared (to get the width estimate).  Is the\n\
	-g option to add a fourth statistic to probe the radial gradient\n\
	of the donut brightness.\n\
\n\
	Use -u option to output the man-page.\n\
\n\
SEE ALSO\n\
	sliceimage\n\
\n\
AUTHOR\n\
	Nick Kaiser --- kaiser@hawaii.edu\n\n"

#include <stdio.h>
#include <math.h>
#include <stdlib.h>
#include <string.h>
#include <limits.h>

#include "../../utils/stats_stuff.h"
#include "../../utils/error.h"
#include "../../utils/arrays.h"
#include "../../imlib/fits.h"
#include "../../utils/args.h"

#define ANALYSIS_MODE	0
#define SYNTHESIS_MODE	1
#define IPBUFFSIZE	6

int     multiply(double **fm, int mmax, double mulfac);
int     synthesise(double **fm, int mmax, double *fsyn, int nbins);
int     fouriersum(double **fm, int mmax, double val, double **trig);
int     maskimage(float **f, float **r, float **phi, int nx, int ny,  double r0, double w0, double **fsyn, int nbins, double maskfactor);
int	makemodel(float **f, float **r, float **phi, int nx, int ny,  double r0, double w0, double **fsyn, int nbins, int nstats);

main (int argc, char *argv[]) {
	char		*flag, lccom[1024];
	fitsheader	*fits;
	int		nstats, i, j, nx, ny, iX, iY, ix, iy, m, mmax, opmode, nbins, iphi;
	float		**f, **r, **phi;
	double		nsum, fsum, fxsum, fysum, ffsum, frsum;
	double		x0, y0, r0, w0, rr;
	double		***fm, ****trig, xhat[2], **fsyn, dphi, *ipbuff;
	FILE		*ipstream;
	int		writemaskedimages, makemodelimages, dofluxgradient;
	double		maskfactor;

	/* defaults */
	opmode 		= ANALYSIS_MODE;
	nbins		= 256;
	writemaskedimages = 0;
	makemodelimages	= 0;
	maskfactor 	= 1.0;
	nstats 		= 3;
	dofluxgradient 	= 0;

        /* parse args */
        argsinit(argc, argv, usage);
        while(nextargtype() == FLAG_ARG) {
		flag = getflag();
                switch (flag[0]) {
			case 's':
				opmode = SYNTHESIS_MODE;
				nbins = getargi();
				break;
			case 'm':
				writemaskedimages = 1;
				break;
			case 'f':
				maskfactor = getargd();
				break;
			case 'M':
				makemodelimages = 1;
				break;
			case 'g':
				dofluxgradient = 1;
				nstats = 4;
				break;
                        case 'u':
                        default:
                                error_exit(usage);
                }
        }
	if (makemodelimages && writemaskedimages) {
		error_exit("getdonutstats : error : you can't use -m and -M options together\n");
	}
	mmax = getargi();

	dphi = 2 * M_PI / nbins;

        /* allocate statistics */
	fm = (double ***) calloc(nstats, sizeof(double **));
	fsyn = (double **) calloc(nstats, sizeof(double *));
        for (i = 0; i < nstats; i++) {
                fm[i] = (double **) calloc(mmax, sizeof(double *));
                for (m = 0; m < mmax; m++) {
                        fm[i][m] = (double *) calloc(2, sizeof(double));
                }
		/* and space for synthesised values */
		fsyn[i] = (double *) calloc(nbins, sizeof(double));
        }

    if (opmode == ANALYSIS_MODE) {
	/* read the header and get image dimensions */
	fits = readfitsheader(stdin);
	if (fits->ndim < 2) {
		error_exit("getdonutstats : error : input image must be at least 2-dimensional");
	}
	nx = fits->n[0];
	ny = fits->n[1];

	/* allocate arrays */
	allocFloatArray(&f, nx, ny);
	allocFloatArray(&r, nx, ny);
	allocFloatArray(&phi, nx, ny);
	trig = (double ****) calloc(ny, sizeof(double ***));
	for (iy = 0; iy < ny; iy++) {
		trig[iy] = (double ***) calloc(nx, sizeof(double **));
		for (ix = 0; ix < nx; ix++) {
			trig[iy][ix] = (double **) calloc(mmax, sizeof(double *));
			for (m = 0; m < mmax; m++) {
				trig[iy][ix][m] = (double *) calloc(2, sizeof(double));	
			}
		}
	}

	if (writemaskedimages || makemodelimages) {
		writefitsheader(fits);
	} else {
		/* create the cat header */
		sprintf(lccom, "lc -C -H 'imsize = %d' -N '1 2 x' -N '1 2 dx' -n r0 -n w0 -N '3 %d %d 2 fm' < /dev/null", nx, nstats, mmax);
		system(lccom);
	}

	/* loop over image planes */
	for (iY = 0; iY < (fits->n[3] ? fits->n[3] : 1); iY++) {
	    for (iX = 0; iX < (fits->n[2] ? fits->n[2] : 1); iX++) {
		readfitsplane((void **) f, fits);
		/* compute the mean of the outer corners (r > nx / 2) and set those pixels to zero */
		fsum = nsum = 0.0;
                for (iy = 0; iy < ny; iy++) {
                        for (ix = 0; ix < nx; ix++) {
				rr = (iy + 0.5 - ny / 2) * (iy + 0.5 - ny / 2) + (ix + 0.5 - nx / 2) * (ix + 0.5 - nx / 2);
				if (rr > nx * nx / 4) {
					fsum += f[iy][ix];
					nsum += 1.0;
					f[iy][ix] = 0.0;
				}
			}
		}
                for (iy = 0; iy < ny; iy++) {
                        for (ix = 0; ix < nx; ix++) {
				f[iy][ix] -= fsum / nsum;
			}
		} 
		/* compute sum f, f * x and f * y */
		fsum = fxsum = fysum = ffsum = 0.0;
		for (iy = 0; iy < ny; iy++) {
			for (ix = 0; ix < nx; ix++) {
				fsum += f[iy][ix];
				ffsum += f[iy][ix] * f[iy][ix];
				fxsum += ix * f[iy][ix];
				fysum += iy * f[iy][ix];
			}
		}
		if (fsum > 0.0) {
			/* compute the centroids */
			x0 = fxsum / fsum;
			y0 = fysum / fsum;
			/* make r, phi images and accumulate frsum */
			frsum = 0.0;
                	for (iy = 0; iy < ny; iy++) {
                	        for (ix = 0; ix < nx; ix++) {
					r[iy][ix] = sqrt((ix - x0) * (ix - x0) + (iy - y0) * (iy - y0));
					phi[iy][ix] = atan2(iy - y0, ix - x0);
					if (phi[iy][ix] < 0.0) {
						phi[iy][ix] += 2 * M_PI;
					}
					for (m = 0; m < mmax; m++) {
						trig[iy][ix][m][0] = cos((m + 1) * phi[iy][ix]);
						trig[iy][ix][m][1] = sin((m + 1) * phi[iy][ix]);
					}
					frsum += f[iy][ix] * r[iy][ix];
				}
			}
			/* compute mean radius and width */
			r0 = frsum / fsum;
			w0 = fsum * fsum / (2 * M_PI * r0 * ffsum);
			/* zero the Fourier statistics */
			for (i = 0; i < nstats; i++) {
				multiply(fm[i], mmax, 0.0);
			}
			/* accumulate the angular transform of f */
                        for (iy = 0; iy < ny; iy++) {
                                for (ix = 0; ix < nx; ix++) {
					fouriersum(fm[0], mmax, f[iy][ix], trig[iy][ix]);
				}
			}
			/* normalise the flux transform  - with factor 2 because we only had +ve freq */
			multiply(fm[0], mmax, 2.0 / fsum);
			/* and synthesise it */
			synthesise(fm[0], mmax, fsyn[0], nbins);
			/* accumulate the angular transform of f r / (1 + fsyn[0]) */
                        for (iy = 0; iy < ny; iy++) {
                                for (ix = 0; ix < nx; ix++) {
					iphi = (int) floor(phi[iy][ix] / dphi);
					fouriersum(fm[1], mmax, f[iy][ix] * r[iy][ix] / (1.0 + fsyn[0][iphi]), trig[iy][ix]);			
                                }
                        }
			/* and normalise it */
			multiply(fm[1], mmax, 2.0 / fsum);
			/* and synthesise it */
			synthesise(fm[1], mmax, fsyn[1], nbins);
			/* now we do the angular transform of (f / f[phi])^2 to get something sensitive to the width */
                        for (iy = 0; iy < ny; iy++) {
                                for (ix = 0; ix < nx; ix++) {
					iphi = (int) floor(phi[iy][ix] / dphi);
					fouriersum(fm[2], mmax, pow(f[iy][ix] / (1.0 + fsyn[0][iphi]), 2.0), trig[iy][ix]);
				}
			}
			/* and normalise by ffsum */
			multiply(fm[2], mmax, 2.0 / ffsum);
			/* and synthesise it */
			synthesise(fm[2], mmax, fsyn[2], nbins);
			maskimage(f, r, phi, nx, ny,  r0, w0, fsyn, nbins, maskfactor);
			if (dofluxgradient) {
				/* make angular transform of f * (r - fsyn[1]) to get something sensitive to flux gradient */
	                        for (iy = 0; iy < ny; iy++) {
	                                for (ix = 0; ix < nx; ix++) {
	                                        iphi = (int) floor(phi[iy][ix] / dphi);
	                                        fouriersum(fm[3], mmax, f[iy][ix] * (r[iy][ix] - fsyn[1][iphi]), trig[iy][ix]);
					}
				}
				/* and normalise */
				multiply(fm[3], mmax, 2.0 / fsum);
			}
			if (writemaskedimages || makemodelimages) {
				if (makemodelimages) {
					makemodel(f, r, phi, nx, ny,  r0, w0, fsyn, nbins, nstats);
				}
				writefitsplane((void **) f, fits);
			} else {
				/* output */
				multiply(fm[0], mmax, r0);
				multiply(fm[2], mmax, 0.5 * w0);
				printf("%d %d %10.5le %10.5le %10.5le %10.5le", iX, iY, x0, y0, r0, w0);
				for (i = 0; i < nstats; i++) {
					for (m = 0; m < mmax; m++) {
                        	        	for (j = 0; j < 2; j++) {
							printf(" %10.5e", fm[i][m][j]);
						}
					}
				}
				printf("\n");
			}
		} else {
			if (writemaskedimages || makemodelimages) {
				writefitsplane((void **) f, fits);
			}
		}
	    }
	}
	} else {
		/* SYNTHESIS_MODE */
		/* generate the header */
	        sprintf(lccom, "lc -C -b -N '1 2 x' -N '1 2 dx' -n r0 -n w0 -N '1 2 xhat' -N '1 %d f' < /dev/null", nstats);
       		system(lccom);
		/* open pipe to read the data */
		ipstream = popen("lc -b -o x dx r0 w0 fm", "r");
		/* allocate space for x, dx r0 and w */
		ipbuff = (double *) calloc(IPBUFFSIZE, sizeof(double));
		while (IPBUFFSIZE == fread(ipbuff, sizeof(double), IPBUFFSIZE, ipstream)) {
			for (i = 0; i < nstats; i++) {
				for (m = 0; m < mmax; m++) {
					fread(fm[i][m], sizeof(double), 2, ipstream);
				}
				synthesise(fm[i], mmax, fsyn[i], nbins);
			}
			for (iphi = 0; iphi < nbins; iphi++) {
				fwrite(ipbuff, sizeof(double), IPBUFFSIZE, stdout);
				xhat[0] = cos(iphi * dphi);
				xhat[1] = sin(iphi * dphi);
				fwrite(xhat, sizeof(double), 2, stdout);
				for (i = 0; i < nstats; i++) {
					fwrite(&(fsyn[i][iphi]), sizeof(double), 1, stdout);
				}
			}
		}
	}

	if (writemaskedimages) {
		writefitstail(fits);
	}

	exit(0);
}


int     makemodel(float **f, float **r, float **phi, int nx, int ny,  double r0, double w0, double **fsyn, int nbins, int nstats)
{
        int     ix, iy, iphi;
        double  dphi, rphi, wphi, fgrad;

        dphi = 2 * M_PI / nbins;

        for (iy = 0; iy < ny; iy++) {
                for (ix = 0; ix < nx; ix++) {
                        iphi = (int) floor(phi[iy][ix] / dphi);
                        rphi = r0 + fsyn[1][iphi];
                        wphi = w0 / (1.0 + fsyn[2][iphi]);
			if (nstats > 3) {
				fgrad = 12.0 * fsyn[3][iphi] / (wphi * wphi);
			} else {
				fgrad = 0.0;
			}
                        if ((r[iy][ix] < rphi + 0.5 * wphi) && (r[iy][ix] > rphi - 0.5 * wphi)) {
                                f[iy][ix] = (1.0 + fsyn[0][iphi]) * (1.0 + fsyn[2][iphi]) * (1 + fgrad * (r[iy][ix] - fsyn[1][iphi]));
                        } else {
				f[iy][ix] = 0.0;
			}
                }
        }
}


int	maskimage(float **f, float **r, float **phi, int nx, int ny,  double r0, double w0, double **fsyn, int nbins, double maskfactor)
{
	int 	ix, iy, iphi;
	double	dphi, rphi, wphi;

	dphi = 2 * M_PI / nbins;

	for (iy = 0; iy < ny; iy++) {
		for (ix = 0; ix < nx; ix++) {
			iphi = (int) floor(phi[iy][ix] / dphi);
			rphi = r0 + fsyn[1][iphi];
			wphi = maskfactor * w0 / (1.0 + fsyn[2][iphi]);
			if ((r[iy][ix] > rphi + 0.5 * wphi) || (r[iy][ix] < rphi - 0.5 * wphi)) {
				f[iy][ix] = 0.0;
			}
		}
	}
}

int	multiply(double **fm, int mmax, double mulfac)
{
	int 	m, j;

	for (m = 0; m < mmax; m++) {
        	for (j = 0; j < 2; j++) {
               		fm[m][j] *= mulfac;
		}
	}
}

int	synthesise(double **fm, int mmax, double *fsyn, int nbins)
{
	int 	i, m;
	double	dphi;

	dphi = 2 * M_PI / nbins;
	for (i = 0; i < nbins; i++) {
		fsyn[i] = 0.0;
                for (m = 0; m < mmax; m++) {
	                fsyn[i] += fm[m][0] * cos(i * (m + 1) * dphi);
                        fsyn[i] += fm[m][1] * sin(i * (m + 1) * dphi);
                }
	}
}

int	fouriersum(double **fm, int mmax, double val, double **trig)
{
	int	m, j;

	for (m = 0; m < mmax; m++) {
        	for (j = 0; j < 2; j++) {
                	fm[m][j] += val * trig[m][j];
		}
	}
}
