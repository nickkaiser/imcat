#include <stdio.h>
#include <stdlib.h>
#include <math.h>
#include "vectors.h"
#include "deltam.h"
#include "airmassmin.h"
#include "planetdata.h"
#include "obsdata.h"

#define usage "\nNAME\n\
	orbs2obs\n\
\n\
SYNOPSIS\n\
	orbs2obs np nf dt [-w weather.cat]\n\
\n\
DESCRIPTION\n\
	orbs2obs reads from stdin an lc catalog containing nf\n\
	frames of np+1 records containing at least heliocentric\n\
	phase-space coordinates r[3] and v[3], as well as\n\
	scalars risk and v_inf. The first record\n\
	in each frame is understood to contain the coordinates of\n\
	the observer, and orb2obs computes various observocentric\n\
	properties such as the angular speed, delta-magnitude etc.\n\
	Timestep dt is given in units of the Earth's dynamical time.\n\
\n\
	It first computes helio-centric coords of the object, relative\n\
	to the center of Earth, and at the integrator timestep. It then\n\
	finds the time (on hourly intervals) for which the object has\n\
	the minimum air mass, subject to constraints on the sun (> 18 deg\n\
	below horizon) and moon (below horizon).\n\
\n\
	It then computes the position of observer and object at the time\n\
	of observation, and computes other properties.\n\
\n\
	Quantities output are:\n\
	ra[3], va[3]	# position and velocity of the object\n\
	re[3], ve[3]	# position of the Earth\n\
	rho[3]		# position of observatory wrt Earth\n\
	rlen		# Earth-object distance\n\
	dotn		# angular speed\n\
	mu		# cosine of angle from opposition\n\
	dm[3]		# phase angle/distance magnitude shift (3 models)\n\
	lambda, beta	# ecliptic coords\n\
	lon, lat	# helio-ecliptic coords\n\
	pnum		# particle number\n\
	fnum		# frame number\n\
	airmass_min	# minimum air mass (on the hour)\n\
	risk		# risk factor\n\
	v_inf		# collision velocity\n\
	alpha, delta	# equatorial coords\n\
	t_int		# time of integrator time-step (in t_dyn)\n\
	t_obs		# time of observation\n\
	t_local		# local time in hours\n\
\n\
	With -w flag we read nf records from weather.cat containing\n\
	frac_clear, extinct, seeing, and these are also output.\n\
\n\
SEE ALSO\n\
	evolveorbits\n\
AUTHOR\n\
	Nick Kaiser --- kaiser@hawaii.edu\n\n"


main (int argc, char *argv[])
{
	double	*rhelio, *vhelio, *robs, *vobs, *rearth, *vearth, *r, *v, dotn, dmag, fnum, pnum;
	double	*n, *ndot, rlen, *tmpvec, *tmpvec2, mu, dm[3], lat, lon, lonobs, lambda, beta, dt, risk, v_inf;
	double	phaseofyear, zd_solar_min, zd_lunar_min, time, phaseofday, zd_target_min, airmass_min;
	int	ip, i, np, im, nf, nstepsperday, doweather;
	double	*frac_clear, *extinct, *seeing, weatherbuff[3];
	double	alpha, delta, t_int, t_obs, t_local;
	char	*weathercatfile, tmpcom[1024];
	FILE	*ipf;

	/* defaults */
	doweather = 0;

	/* parse args */
	if (argc < 4) {
		fprintf(stderr, usage);
		exit(-1);
	}
	if ((sscanf(argv[1], "%d", &np) != 1) 
		|| (sscanf(argv[2], "%d", &nf) != 1)
		|| (sscanf(argv[3], "%lf", &dt) != 1)) {
		fprintf(stderr, usage);
		exit(-1);
	}
	if (argc > 4) {
		if (argc != 6) {
			fprintf(stderr, usage);
			exit(-1);
		}
		doweather = 1;
		weathercatfile = argv[5];
		sprintf(tmpcom, "lc -b -o frac_clear extinct seeing < %s", weathercatfile);
		ipf = popen(tmpcom, "r");
		if (!ipf) {
			fprintf(stderr, "failed to open weather catalog for input\n");
			exit(-1);
		}
		frac_clear	= (double *) calloc(nf, sizeof(double));		
		extinct		= (double *) calloc(nf, sizeof(double));		
		seeing		= (double *) calloc(nf, sizeof(double));
		for (i = 0; i < nf; i++) {
			fread(weatherbuff, sizeof(double), 3, ipf);
			frac_clear[i]	= weatherbuff[0];
			extinct[i]		= weatherbuff[1];
			seeing[i]		= weatherbuff[2];
		}
		pclose(ipf);
	}

	/* parameters for minimum air mass calculation */
	zd_solar_min = 108.0 * M_PI / 180.0;
	zd_lunar_min = 90.0 * M_PI / 180.0;
	nstepsperday = 24;

	/* allocate space for re[3], rref[3] */
	rhelio 	= (double *) calloc(3, sizeof(double));
	vhelio 	= (double *) calloc(3, sizeof(double));
	robs 	= (double *) calloc(3, sizeof(double));
	vobs 	= (double *) calloc(3, sizeof(double));
	rearth 	= (double *) calloc(3, sizeof(double));
	vearth 	= (double *) calloc(3, sizeof(double));
	r 	= (double *) calloc(3, sizeof(double));
	v 	= (double *) calloc(3, sizeof(double));
	n 	= (double *) calloc(3, sizeof(double));
	ndot 	= (double *) calloc(3, sizeof(double));
	tmpvec 	= (double *) calloc(3, sizeof(double));
	tmpvec2 = (double *) calloc(3, sizeof(double));
	

	/* open lc pipe for input */
	ipf = popen("lc -b -o r v risk v_inf", "r");
	if (!ipf) {
		fprintf(stderr, "orbs2obs : failed to open lc-pipe for input\n");
		exit(-1);
	}

	/* send the cat header to stdout */
	strcpy(tmpcom, "lc -C -b -N '1 3 ra' -N '1 3 va' -N '1 3 re' -N '1 3 ve' -N '1 3 rho' -n rlen -n dotn -n mu ");
	strcat(tmpcom, "-N '1 3 dm' -n lambda -n beta -n lon -n lat -n pnum -n fnum -n airmass_min -n risk -n v_inf ");
	strcat(tmpcom, "-n alpha -n delta -n t_int -n t_obs -n t_local ");
	if (doweather) {
		strcat(tmpcom, "-n frac_clear -n extinct -n seeing ");
	}
	strcat(tmpcom, "< /dev/null");
	if (system(tmpcom)) {
		fprintf(stderr, "failed to execute '%s'\n", tmpcom);
		exit(-1);
	}

	/* process the input */
	for (i = 0; i < nf; i++) {
		fnum = (double) i;
		fread(rearth, sizeof(double), 3, ipf);
		fread(vearth, sizeof(double), 3, ipf);
		fread(&risk, sizeof(double), 1, ipf);
		fread(&v_inf, sizeof(double), 1, ipf);
		for (ip = 0; ip < np; ip++) {
			pnum = (double) ip;
			fread(rhelio, sizeof(double), 3, ipf);
			fread(vhelio, sizeof(double), 3, ipf);
			fread(&risk, sizeof(double), 1, ipf);
			fread(&v_inf, sizeof(double), 1, ipf);
			/* get the position relative to Earth */
			diff(r, rhelio, rearth);
			diff(v, vhelio, vearth);
			rlen = length(r);
			/* compute helio-ecliptic coords at integrator time-steps */
			lat = asin(r[2] / rlen) * 180.0 / M_PI;
			lonobs = atan2(rearth[1], rearth[0]);
			lon = (atan2(r[1], r[0]) - lonobs) * 180.0 / M_PI;
			lon = (lon > 180.0 ? lon - 360.0 : lon);
			lon = (lon < -180.0 ? lon + 360.0 : lon);
			/* get the minimum air mass */
			phaseofyear = i * dt;
			airmass_min = airmassmin(lat * M_PI / 180.0, lon * M_PI / 180.0, phaseofyear, zd_solar_min, zd_lunar_min, nstepsperday, &phaseofday, &zd_target_min);
			/* our time-steps were chosen to coincide with midnight */
			/* so we should step the earth and object positions forward/backward */
			/* unit of time is t_dyn = 1 yr / 2 pi.  We assume 365.25 days per year */
			/* first we update the geocenter */
			copy(tmpvec, vearth);
			scale(tmpvec, phaseofday / DAYSPERYEAR);
			add(tmpvec2, rearth, tmpvec);
			copy(rearth, tmpvec2);
			/* also include the position of observatory relative to Earth center */
			assign(tmpvec,
				cos(LATOBSINDEG * M_PI / 180.0) * cos(phaseofyear + phaseofday), 
				cos(LATOBSINDEG * M_PI / 180.0) * sin(phaseofyear + phaseofday),
				sin(LATOBSINDEG * M_PI / 180.0));
			scale(tmpvec, R_EARTH / AU);
			roty(tmpvec, AXISTILTINDEG * M_PI / 180.0);
			add(robs, tmpvec, tmpvec2);
			/* now we do the object */
			copy(tmpvec, vhelio);
			scale(tmpvec, phaseofday / DAYSPERYEAR);
			add(tmpvec2, rhelio, tmpvec);
			copy(rhelio, tmpvec2);
			/* now that we have better obs, object positions we can compute accurate angles etc */
			diff(r, rhelio, robs);
			diff(v, vhelio, vobs);
			rlen = length(r);
			copy(n, r);
			scale(n, 1.0 / rlen);
			copy(tmpvec, n);
			scale(tmpvec, dot(n, v));
			diff(ndot, v, tmpvec);
			scale(ndot, 1.0 / rlen);
			dotn = length(ndot);
			mu = dot(r, robs) / (rlen * length(robs));
			dm[0] = deltam(rhelio, r, ASTEROID_G_DARK);
			dm[1] = deltam(rhelio, r, ASTEROID_G_MEDIUM);
			dm[2] = deltam(rhelio, r, ASTEROID_G_LIGHT);
			/* ecliptic coords */
			beta = asin(r[2] / rlen) * 180.0 / M_PI;
			lambda = 90.0 + atan2(r[1], r[0]) * 180.0 / M_PI;
			/* equatorial coords */
			roty(r, - AXISTILTINDEG * M_PI / 180.0);
			alpha = 90.0 + atan2(r[1], r[0]) * 180.0 / M_PI;
			delta = asin(r[2] / rlen) * 180.0 / M_PI;
			/* times */
			t_int = i * dt;
			t_obs = t_int + phaseofday / 360.0;
			t_local = 12.0 * phaseofday / M_PI;
			/* output the results */
			fwrite(rhelio, sizeof(double), 3, stdout);		
			fwrite(vhelio, sizeof(double), 3, stdout);		
			fwrite(robs, sizeof(double), 3, stdout);		
			fwrite(vearth, sizeof(double), 3, stdout);
			diff(tmpvec, robs, rearth);		
			fwrite(tmpvec, sizeof(double), 3, stdout);
			fwrite(&rlen, sizeof(double), 1, stdout);		
			fwrite(&dotn, sizeof(double), 1, stdout);		
			fwrite(&mu, sizeof(double), 1, stdout);		
			fwrite(dm, sizeof(double), 3, stdout);		
			fwrite(&lambda, sizeof(double), 1, stdout);		
			fwrite(&beta, sizeof(double), 1, stdout);		
			fwrite(&lon, sizeof(double), 1, stdout);		
			fwrite(&lat, sizeof(double), 1, stdout);		
			fwrite(&pnum, sizeof(double), 1, stdout);		
			fwrite(&fnum, sizeof(double), 1, stdout);		
			fwrite(&airmass_min, sizeof(double), 1, stdout);
			fwrite(&risk, sizeof(double), 1, stdout);
			fwrite(&v_inf, sizeof(double), 1, stdout);
			fwrite(&alpha, sizeof(double), 1, stdout);
			fwrite(&delta, sizeof(double), 1, stdout);
			fwrite(&t_int, sizeof(double), 1, stdout);
			fwrite(&t_obs, sizeof(double), 1, stdout);
			fwrite(&t_local, sizeof(double), 1, stdout);
			if (doweather) {
				fwrite(frac_clear + i, sizeof(double), 1, stdout);
				fwrite(extinct + i, sizeof(double), 1, stdout);
				fwrite(seeing + i, sizeof(double), 1, stdout);
			}	
		}
	}

	exit(0);
}

