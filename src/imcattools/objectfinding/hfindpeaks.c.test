/*
 * hfindpeaks.c
 *
 * a hierarchical peak finding algorithm
 *
 * creates a sequence of progressively more coarsely smoothed images, finds
 * the peaks at each level of smoothing and links these peaks together into
 * lines according to criteria in neighbours.
 *
 * for each level
 *	* smooth
 *	* find peaks and load them into a list headed by peakhead
 *	  try to install the peaks one at a time onto one of lines in linked list
 *	  headed by linehead.  If we can't we create a new line and link it
 *	  onto the end of the linked list
 *	* find dead lines (ones which didn't get peak added to at last step)
 *	  and dispose of them; i.e. write out most significant point
 */

#define usage "\n\n\n\
NAME\n\
	hfindpeaks --- hierarchical object finder\n\
\n\
SYNOPSIS\n\
	hfindpeaks fitsfile [option...] > catalogue \n\
 		-r rf1 rf2	# range of filter radii (0.5 20.0)\n\
		-d dlnrf	# major step in log(rf) (0.6)\n\
		-p nplanes	# number of interpolated planes per major step (3)\n\
		-l flink	# linking parameter(1.0)\n\
		-n nu		# significance threshold (4.0)\n\
		-s sigma mode	# sky statistics\n\
\n\
DESCRIPTION\n\
	\"hfindpeaks\" --- a heirarchical object finder\n\
	fft gaussian filters an image with sequence of progressively\n\
	larger smoothing radius mexican hat filters and constructs peak\n\
	trajectories.  We then define an object to be the\n\
	point of highest significance along a trajectory.\n\
	rf1, rf2 are min and max filter radii and we filter\n\
	with logarithmic steps in rf defined by dlnrf\n\
	Peaks at adjacent smoothing levels are connected if their\n\
	separation is less than flink * rf.\n\
	Use -s option to supply sky mode, sigma rather than have\n\
	them calculated from the image.\n\
	The catalogue is in 'lc' format.\n\
	The position 'x' is measured relative to the bottom left\n\
	corner of the bottom left pixel (so e.g. a single 'hot' pixel\n\
	at (ix,iy) = (23,67), would generate an object with x = (23.5, 67.5)\n\
\n\
AUTHOR\n\
	Nick Kaiser --- kaiser@cita.utoronto.ca\n\
\n\n\n"


#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <limits.h>
#include <math.h>

#include "../../fftlib/myfft.h"
#include "../../imlib/fits.h"
#include "../../utils/error.h"
#include "../../utils/args.h"
#include "../../imlib/filters.h"
#include "../../utils/arrays.h"
#include "../../utils/stats_stuff.h"
#include "../../catlib/cat.h"
#include "hfindpeaks.h"

static float	sigma1, sigma2, normfactor;

static	int	nlines = 0, npeaks = 0;
static	FILE	*outpipe;

#define TINY	1.e-20

main(int argc, char *argv[])
{
	float		**fin , **fs, **fs1, **fs2, **fstemp, rf, rf1, rf2, drf, rfx, rflast;
	float		dlnrf, flink, dmax, nulimit, sigma, a1, a2;
	int		level = 0;
	int		icell, jcell, ncells, installed, nplanes, plane;
	peak		*peakhead, *thepeak, *nextpeak;
	line		*linehead = NULL, *theline, *nextline;
	line		***cell;
	fitsheader	*fits;
	fitscomment	*com;
	char		*fitsfilename, lcstring[1024], tempstring[128], *flag;
	int		i, j, N1, N2, Nmax, margin = 3;
	FILE		*fitsfile, *lcpipe;
	cathead		*thecathead;
	float		magicsubstitute;
	fstatsrec	srec;
	float		rfratio, rfactor, ffactor;
	fft_type	fk, fkcopy;
	int		calcstats;
	
	/* defaults */
	rf1 = 0.5;
	rf2 = 20.0;
	dlnrf = 0.6;
	nplanes = 3;
	flink = 1.0;
	nulimit = 4.0;
	rfratio = 2.0;		/* mexican hat parameter */
	calcstats = 1;
	
	if (argv[1][0] == '-')
		error_exit(usage);
	argsinit(argc, argv, usage);
	fitsfilename = getarg();
	while (flag = getflag()) {
		switch (flag[0]) {
			case 'r':
				rf1 = getargf();
				rf2 = getargf();
				break;
			case 'd':
				dlnrf = getargf();
				break;
			case 'l':
				flink = getargf();
				break;
			case 'n':
				nulimit = getargf();
				break;
			case 'p':
				nplanes = getargi();
				break;
			case 's':
				srec.sigma = getargf();
				srec.fmode  = getargf();
				calcstats = 0;
				break;
			case 'u':
			default:
				error_exit(usage);
		}
	}

	outpipe = popen("hcat2cat", "w");
	if (!outpipe)
		error_exit("hfindpeaks: unable to open pipe to hcat2cat\n");
	setcatopf(outpipe);

	fitsfile = fopen(fitsfilename, "r");
	if (!fitsfile)
		error_exit("hfindpeaks: can't open fits file\n");
	read2Dfloatimage(&fin, &N1, &N2, &fits, fitsfile);
	Nmax = (N1 > N2 ? N1 : N2);

	/* get normfactor */
	normfactor = 1.0;

	allocFloatArray(&fs, N1, N2);
	allocFloatArray(&fs1, N1, N2);
	allocFloatArray(&fs2, N1, N2);
	if (calcstats)
		fdo_stats(fin, N1, N2, margin, &srec);
	magicsubstitute = srec.fmode;

	/* simplest to just create the cathead with 'lc */
	sprintf(lcstring, "lc -C -x -H 'fits_name = {%s}' ", fitsfilename);
	sprintf(tempstring, "-H 'fits_size = %d %d 2 vector' -H 'has_sky = 0' ", N1, N2);
	strcat(lcstring, tempstring);
	sprintf(tempstring, "-N '1 2 x' -N '1 1 lg' -N '1 1 rg' -N '1 2 eg' -N '1 1 fs' -N '1 1 nu' < /dev/null");
	strcat(lcstring, tempstring);
	lcpipe = popen(lcstring, "r");
	setcatipf(lcpipe);
	thecathead = readcathead();
	pclose(lcpipe);

	/* now add the history */
	addargscomment(argc, argv, thecathead);

	/* and write the cathead */
	writecathead(thecathead);


	substitute(fin, N1, N2, magicsubstitute);
	alloc_fft(&fk, N1, N2);
	alloc_fft(&fkcopy, N1, N2);
	forward_fft(fin, N1, N2, fk);

	/* make the highest resolution smoothed image */
	rflast = rf = rf1;
	sigma1 = 0.5 * rf * rf;
	sigma2 = rfratio * rfratio * sigma1;
	copy_fft(fk, N1, N2, fkcopy);
	filter(fkcopy, N1, N2, thefilterfunction);
	inverse_fft(fkcopy, N1, N2, fs2);

	for (rf = rf1 * (1 + dlnrf); rf <= rf2 * (1 + dlnrf); rf *= (1 + dlnrf)) {
		drf = rf - rflast;
		fstemp = fs1;
		fs1 = fs2;
		fs2 = fstemp;
		sigma1 = 0.5 * rf * rf;
		sigma2 = rfratio * rfratio * sigma1;
		copy_fft(fk, N1, N2, fkcopy);
		filter(fkcopy, N1, N2, thefilterfunction);
		inverse_fft(fkcopy, N1, N2, fs2);
		for (plane = 0; plane < nplanes; plane++) {
			/* make the interpolated image */
			a1 = ((float) (nplanes - plane)) / nplanes;
			a2 = ((float) plane) / nplanes;
			for (i = 0; i < N2; i++) {
				for (j = 0; j < N1; j++) {
					fs[i][j] = a1 * fs1[i][j] + a2 * fs2[i][j]; 
				}
			}
			rfx = rflast + a2 * drf;
			if (rfx > rf2) {
				break;
			}
			sigma = srec.sigma / (2 * sqrt(PI) * rfx);
			sigma *= sqrt(1 - 4 / (1 + rfratio * rfratio) + 1 / (rfratio * rfratio));
			dmax = rfx * flink;
			ncells = ceil(Nmax / dmax);
			cell = makecell(linehead, dmax, ncells);
			peakhead = getpeaks(N1, N2, fs, level, rfx, sigma);
			thepeak = peakhead;
			while (thepeak) {			/* loop over new peaks */
			nextpeak = thepeak->next;	/* 'cos thepeak->next gets trashed */
				getcoords(thepeak, &icell, &jcell, dmax);
				installed = 0;
				for (i = icell - 1; i <= icell + 1; i++) {
					for (j = jcell - 1; j <= jcell + 1; j++) {
						if (i < 0 || i >= ncells || j < 0 || j >= ncells)
							continue;
						if (install(thepeak, cell[i][j], dmax)) {
							installed = 1;
							break;
						}
					}
					if (installed)
						break;
				}
				if (!installed)
					addnewline(&linehead, thepeak);
				thepeak = nextpeak;
			}
			removedead(&linehead, level, nulimit);
			freecell(cell, ncells);
			level++;
		}
		rflast = rf;
	}
	
	/* dispose of any lines still alive at end */
	theline = linehead;
	while (theline) {
		nextline = theline->next;
		disposeof(theline, nulimit);
		theline = nextline;
	}
	exit(0);
}



peak	*getpeaks(int N1, int N2, float **fs, int level, float rf, float sigma)
{
	int	i, j;
	peak	*thepeak, *newpeak, *peakhead = NULL;
	float	**frow, **ftop, **fbot, *fp, f, Q11, Q22, Q12, Fp, Fpp;
	
	for (i = 1; i < N2 - 1; i++) {
		frow = fs + i;
		ftop = frow + 1;
		fbot = frow - 1;
		for (j = 1; j < N1 - 1; j++) {
			fp = *frow + j;
			f = *fp;
			/* middle row */
			if (*(fp-1) >= f)
				continue;
			if (*(fp+1) >= f)
				continue;	
			/* top row */
			fp = *ftop + j;
			if (*fp >= f)
				continue;
			if (*(fp-1) >= f)
				continue;
			if (*(fp+1) >= f)
				continue;	
			/* bottom row */
			fp = *fbot + j;
			if (*fp >= f)
				continue;
			if (*(fp-1) >= f)
				continue;
			if (*(fp+1) >= f)
				continue;	
			/* if it survived it is a peak */
			newpeak = (peak *) calloc(1, sizeof(peak));
			npeaks++;
			newpeak->i = i;
			newpeak->j = j;
			newpeak->level = level;
			newpeak->rf = rf;
			newpeak->fs = fs[i][j] / normfactor;
			newpeak->nu = fs[i][j] / sigma;
			Q11 = 2 * fs[i][j] - fs[i+1][j] - fs[i-1][j];
			Q22 = 2 * fs[i][j] - fs[i][j+1] - fs[i][j-1];
			Q12 = 0.25 * (fs[i+1][j+1] - fs[i+1][j-1] - fs[i-1][j+1] + fs[i-1][j-1]);
			newpeak->e1 = - (Q11 - Q22) / (Q11 + Q22);
			newpeak->e2 = 2 * Q12 / (Q11 + Q22);
			/* now we add the simple cludge to get more precise position */
			newpeak->x[0] = newpeak->j + 0.5;
			newpeak->x[1] = newpeak->i + 0.5;
			Fp  = 0.5 * (fs[i][j+1] - fs[i][j-1]);
			Fpp = fs[i][j+1] - 2 * fs[i][j] + fs[i][j-1];
			if (fabs(Fpp) > TINY)
				newpeak->x[0] -= Fp / Fpp;
			Fp  = 0.5 * (fs[i+1][j] - fs[i-1][j]);
			Fpp = fs[i+1][j] - 2 * fs[i][j] + fs[i-1][j];
			if (fabs(Fpp) > TINY)
				newpeak->x[1] -= Fp / Fpp;
			if (!peakhead)
				peakhead = thepeak = newpeak;
			else
				thepeak = thepeak->next = newpeak;
		}
	}
	return (peakhead);
}



int	install(peak *thepeak, line *linehead, float dmax)
{
	line	*theline;
	int	installed;
	
	installed = 0;
	theline = linehead;
	while (theline) {
		if (neighbours(theline->tail, thepeak, dmax)) {	/* add thepeak to the list */
			thepeak->next = NULL;
			theline->tail = theline->tail->next = thepeak;
			installed = 1;
			break;
		}
		theline = theline->cellmate;
	}
	return (installed);
}




void	addnewline(line **lineheadptr, peak *thepeak)
{
	line	*newline;

	newline = (line *) calloc(1, sizeof(line));
	newline->head = newline->tail = thepeak;
	thepeak->next = NULL;
	if (*lineheadptr)
		(*lineheadptr)->prev = newline;
	newline->next = *lineheadptr;
	*lineheadptr = newline;
	nlines++;
}



int	neighbours(peak *peak1, peak *peak2, float dmax)
{
	double	di, dj, dd;
	
	di = peak1->i - peak2->i;
	dj = peak1->j - peak2->j;
	dd = di * di + dj * dj;
	return (dd <= dmax * dmax);
}



void	removedead(line **lineheadptr, int level, float nulimit)
{
	line	*theline, *nextline;
	
	theline = *lineheadptr;
	while (theline) {
		nextline = theline->next;
		if (theline->tail->level != level) {	/* a dead one */
			if (theline == *lineheadptr) {
				*lineheadptr = nextline;
			} else {
				theline->prev->next = nextline;
			}
			if (nextline)
				nextline->prev = theline->prev;
			disposeof(theline, nulimit);
		}
		theline = nextline;
	}
}



void	disposeof(line *theline, float nulimit)
{
	peak	*thepeak, *nextpeak;
	float	maxsig = 0.0;
	
	thepeak = theline->head;
	while (thepeak) {
		nextpeak = thepeak->next;
		if (thepeak->nu > maxsig)
			maxsig = thepeak->nu;
		thepeak = nextpeak;
	}
	thepeak = theline->head;
	while (thepeak) {
		nextpeak = thepeak->next;
		if (maxsig > nulimit)
			fwrite(thepeak, sizeof(peak), 1, outpipe);
		free(thepeak);
		npeaks--;
		thepeak = nextpeak;
	}
	free(theline);
	nlines--;
}




line	***makecell(line *linehead, float dmax, int ncells)
{
	line 	***cell, *theline;
	int	icell, jcell;
		
	cell = (line ***) calloc(ncells, sizeof(line **));
	for (icell = 0; icell < ncells; icell++)
		cell[icell] = (line **) calloc(ncells, sizeof(line *));
	theline = linehead;
	while (theline) {
		getcoords(theline->tail, &icell, &jcell, dmax);
		if (icell < 0 || icell >= ncells || jcell < 0 || jcell >= ncells) {
			fprintf(stderr, "whoops\n");
			exit(-1);
		}
		theline->cellmate = cell[icell][jcell];
		cell[icell][jcell] = theline;
		theline = theline->next;
	}
	return (cell);
}



void	freecell(line ***cell, int ncells)
{
	int icell;
	for (icell = 0; icell < ncells; icell++) {
		free(cell[icell]);
	}
	free(cell);
}


void	getcoords(peak *thepeak, int *icell, int *jcell, float dmax)
{
	*icell = floor(thepeak->i / dmax);
	*jcell = floor(thepeak->j / dmax);
}


#define ZMAX	10

/*
 * mexican hat filter function 
 */
float	thefilterfunction(float ki, float kj)
{
	float	kk, z1, z2;
		
	kk = ki * ki + kj * kj;
	z1 = kk * sigma1;
	if (z1 > ZMAX)
		return (0.0);
	z2 = kk * sigma2;
	if (z2 > ZMAX) {
		return (exp(-z1));
	} else {
		return (exp(-z1) - exp(-z2));
	}
}

#undef ZMAX


