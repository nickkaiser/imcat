.TH "getskymain.c" 3 "23 Dec 2003" "imcat" \" -*- nroff -*-
.ad l
.nh
.SH NAME
getskymain.c \- 
.SH SYNOPSIS
.br
.PP
\fC#include <stdio.h>\fP
.br
\fC#include <math.h>\fP
.br
\fC#include <stdlib.h>\fP
.br
\fC#include <string.h>\fP
.br
\fC#include <limits.h>\fP
.br
\fC#include '../../catlib/cat.h'\fP
.br
\fC#include '../../imlib/fits.h'\fP
.br
\fC#include '../../utils/error.h'\fP
.br
\fC#include '../../utils/arrays.h'\fP
.br
\fC#include '../../utils/stats_stuff.h'\fP
.br
\fC#include 'getsky.h'\fP
.br
\fC#include 'zap.h'\fP
.br

.SS "Defines"

.in +1c
.ti -1c
.RI "#define \fBusage\fP   '\\n\\\fBn\fP\\\fBn\fP\\NAME\\\fBn\fP\\	getsky --- determine model for local sky \fBbackground\fP around objects\\\fBn\fP\\\\\fBn\fP\\SYNOPSIS\\\fBn\fP\\	getsky	[\fBoptions\fP...]\\\fBn\fP\\		-\fBm\fP \fBmode\fP		# \fBmode\fP for \fBbackground\fP sky calculation (1)\\\fBn\fP\\		-\fBa\fP \fBa1\fP \fBa2\fP	# inner and outer radii (default 16 32)\\\fBn\fP\\		-f fitsfile	# specify \fBfits\fP file explicitly\\\fBn\fP\\		-Z \fBr\fP \fBmul\fP	# ignore pixels within \fBmul\fP * \fBr\fP of other objects\\\fBn\fP\\\\\fBn\fP\\DESCRIPTION\\\fBn\fP\\	\\'getsky\\' determines the local sky \fBbackground\fP for objects detected\\\fBn\fP\\	by (\fBh\fP)findpeaks. We determine \fBa\fP mean + gradient model using\\\fBn\fP\\	modal sky value for each of four quadrants of an\\\fBn\fP\\	annulus around the \fBobject\fP.  The inner and outer annulus radii\\\fBn\fP\\	are \fBa1\fP, and \fBa2\fP times:\\\fBn\fP\\		1 \fBpixel\fP		# for \fBmode\fP = 1\\\fBn\fP\\		rg		# for \fBmode\fP = 2\\\fBn\fP\\		\fBrh\fP		# for \fBmode\fP = 3\\\fBn\fP\\		rp		# for \fBmode\fP = 4   \\\fBn\fP\\	The latter two require that we have already run analyse once.\\\fBn\fP\\	Getsky adds entries fb0, dfb[2] to the catalogue and sets the\\\fBn\fP\\	header value 'has_sky'.\\\fBn\fP\\	By default we use the image named in the catalogue, but you can\\\fBn\fP\\	specify an alternative (if you want to use one where the objects\\\fBn\fP\\	have been 'zapped' with makechart for instance).\\\fBn\fP\\	We require at least 16 good pixels in \fBa\fP viable quadrant.  Our strategy is:\\\fBn\fP\\		0 good quadrants:	# mean and gradient = 0.0\\\fBn\fP\\		1,2 good quadrants:	# only calculate mean, gradient = 0\\\fBn\fP\\		3 good quadrants:	# determine mean and gradient\\\fBn\fP\\		4 good quadrants:	# remove most extreme quadrant.   \\\fBn\fP\\	With the '-Z' option, we ignore pixels around other objects if\\\fBn\fP\\	distance is <= \fBr\fP * \fBmul\fP.\\\fBn\fP\\\\\fBn\fP\\AUTHOR\\\fBn\fP\\	Nick Kaiser --- kaiser@cita.utoronto.ca\\\fBn\fP\\\\\fBn\fP\\\fBn\fP\\\fBn\fP'"
.br
.ti -1c
.RI "#define \fBCONST_ANNULUS_MODE\fP   1"
.br
.ti -1c
.RI "#define \fBRG_ANNULUS_MODE\fP   2"
.br
.ti -1c
.RI "#define \fBRH_ANNULUS_MODE\fP   3"
.br
.ti -1c
.RI "#define \fBRP_ANNULUS_MODE\fP   4"
.br
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "\fBmain\fP (int argc, char *argv[])"
.br
.in -1c
.SH "Define Documentation"
.PP 
.SS "#define CONST_ANNULUS_MODE   1"
.PP
Definition at line 59 of file getskymain.c.
.PP
Referenced by main().
.SS "#define RG_ANNULUS_MODE   2"
.PP
Definition at line 60 of file getskymain.c.
.PP
Referenced by main().
.SS "#define RH_ANNULUS_MODE   3"
.PP
Definition at line 61 of file getskymain.c.
.PP
Referenced by main().
.SS "#define RP_ANNULUS_MODE   4"
.PP
Definition at line 62 of file getskymain.c.
.PP
Referenced by main().
.SS "#define \fBusage\fP   '\\n\\\fBn\fP\\\fBn\fP\\NAME\\\fBn\fP\\	getsky --- determine model for local sky \fBbackground\fP around objects\\\fBn\fP\\\\\fBn\fP\\SYNOPSIS\\\fBn\fP\\	getsky	[\fBoptions\fP...]\\\fBn\fP\\		-\fBm\fP \fBmode\fP		# \fBmode\fP for \fBbackground\fP sky calculation (1)\\\fBn\fP\\		-\fBa\fP \fBa1\fP \fBa2\fP	# inner and outer radii (default 16 32)\\\fBn\fP\\		-f fitsfile	# specify \fBfits\fP file explicitly\\\fBn\fP\\		-Z \fBr\fP \fBmul\fP	# ignore pixels within \fBmul\fP * \fBr\fP of other objects\\\fBn\fP\\\\\fBn\fP\\DESCRIPTION\\\fBn\fP\\	\\'getsky\\' determines the local sky \fBbackground\fP for objects detected\\\fBn\fP\\	by (\fBh\fP)findpeaks. We determine \fBa\fP mean + gradient model using\\\fBn\fP\\	modal sky value for each of four quadrants of an\\\fBn\fP\\	annulus around the \fBobject\fP.  The inner and outer annulus radii\\\fBn\fP\\	are \fBa1\fP, and \fBa2\fP times:\\\fBn\fP\\		1 \fBpixel\fP		# for \fBmode\fP = 1\\\fBn\fP\\		rg		# for \fBmode\fP = 2\\\fBn\fP\\		\fBrh\fP		# for \fBmode\fP = 3\\\fBn\fP\\		rp		# for \fBmode\fP = 4   \\\fBn\fP\\	The latter two require that we have already run analyse once.\\\fBn\fP\\	Getsky adds entries fb0, dfb[2] to the catalogue and sets the\\\fBn\fP\\	header value 'has_sky'.\\\fBn\fP\\	By default we use the image named in the catalogue, but you can\\\fBn\fP\\	specify an alternative (if you want to use one where the objects\\\fBn\fP\\	have been 'zapped' with makechart for instance).\\\fBn\fP\\	We require at least 16 good pixels in \fBa\fP viable quadrant.  Our strategy is:\\\fBn\fP\\		0 good quadrants:	# mean and gradient = 0.0\\\fBn\fP\\		1,2 good quadrants:	# only calculate mean, gradient = 0\\\fBn\fP\\		3 good quadrants:	# determine mean and gradient\\\fBn\fP\\		4 good quadrants:	# remove most extreme quadrant.   \\\fBn\fP\\	With the '-Z' option, we ignore pixels around other objects if\\\fBn\fP\\	distance is <= \fBr\fP * \fBmul\fP.\\\fBn\fP\\\\\fBn\fP\\AUTHOR\\\fBn\fP\\	Nick Kaiser --- kaiser@cita.utoronto.ca\\\fBn\fP\\\\\fBn\fP\\\fBn\fP\\\fBn\fP'"
.PP
Definition at line 5 of file getskymain.c.
.SH "Function Documentation"
.PP 
.SS "main (int argc, char * argv[])"
.PP
Definition at line 64 of file getskymain.c.
.PP
References a1, a2, addargscomment(), addobjectitem(), object::addrlist, allocFloatArray(), allocitemcontents(), allocobjectcontents(), allocShortArray(), BINARY_FILE_TYPE, connectobjecttocathead(), CONST_ANNULUS_MODE, copycontentinfo(), copyheaderinfo(), error_exit, exit(), f, fits, getheaderitemaddress(), getobjectitemindex(), getsky(), inheritcontents(), ix, N1, N2, newitem(), newobject(), NUM_TYPE, r, read2Dfloatimage(), readcathead(), readobject(), RG_ANNULUS_MODE, RH_ANNULUS_MODE, RP_ANNULUS_MODE, setcatipf(), setcatopf(), setcatopfiletype(), UNZAP_MODE, usage, writecathead(), writeobject(), x, zap(), and ZAP_MODE.
.SH "Author"
.PP 
Generated automatically by Doxygen for imcat from the source code.
