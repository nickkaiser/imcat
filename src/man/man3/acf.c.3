.TH "acf.c" 3 "23 Dec 2003" "imcat" \" -*- nroff -*-
.ad l
.nh
.SH NAME
acf.c \- 
.SH SYNOPSIS
.br
.PP
\fC#include <stdio.h>\fP
.br
\fC#include <math.h>\fP
.br
\fC#include <stdlib.h>\fP
.br
\fC#include <string.h>\fP
.br
\fC#include <limits.h>\fP
.br
\fC#include '../imlib/fits.h'\fP
.br
\fC#include '../utils/error.h'\fP
.br
\fC#include '../utils/args.h'\fP
.br
\fC#include '../utils/arrays.h'\fP
.br
\fC#include '../fftlib/myfft.h'\fP
.br

.SS "Defines"

.in +1c
.ti -1c
.RI "#define \fBusage\fP   '\\n\\\fBn\fP\\\fBn\fP\\NAME\\\fBn\fP\\	acf --- calculates 2-D autocorrelation function of \fBa\fP \fBfits\fP image\\\fBn\fP\\\\\fBn\fP\\SYNOPSIS\\\fBn\fP\\	acf [\fBoptions\fP...]\\\fBn\fP\\\\\fBn\fP\\DESCRIPTION\\\fBn\fP\\	'acf' reads \fBa\fP \fBfits\fP file from stdin and writes the autocorrelation\\\fBn\fP\\	function to stdout. If the input image is \fBfin\fP(\fBr\fP) then we compute\\\fBn\fP\\		\fBfout\fP(\fBr\fP) = sum_r' \fBfin\fP(\fBr\fP') \fBfin\fP(\fBr\fP' + \fBr\fP) / (\fBN1\fP * \fBN2\fP)\\\fBn\fP\\	and resulting image is wrapped so that zero lag is at \fBpixel\fP (\fBN1\fP/2, \fBN2\fP/2).\\\fBn\fP\\\\\fBn\fP\\	Options are:\\\fBn\fP\\		-p		# calculate power spectrum instead\\\fBn\fP\\		-\fBc\fP \fBf1\fP f2	# cross correlate named \fBfits\fP files\\\fBn\fP\\		-P pixtype	# output pixtype (FLOAT_PIXTYPE)\\\fBn\fP\\		-\fBn\fP		# no MAGIC substitution\\\fBn\fP\\		-\fBm\fP \fBmagicval\fP	# replacement for MAGIC pixels (0)   \\\fBn\fP\\\\\fBn\fP\\	Power is defined so that white noise with variance \fBsigma2\fP\\\fBn\fP\\	will produce P = \fBsigma2\fP. Power is translated so that zero frequency\\\fBn\fP\\	lies at \fBN1\fP/2, \fBN2\fP/2.\\\fBn\fP\\\\\fBn\fP\\	With '-\fBc\fP fits0 fits1' we compute\\\fBn\fP\\\\\fBn\fP\\		\fBc\fP(\fBr\fP) = sum_r' \fBf0\fP(\fBr\fP') \fBf1\fP(\fBr\fP' + \fBr\fP) / (\fBN1\fP * \fBN2\fP)\\\fBn\fP\\\\\fBn\fP\\	to compute instead\\\fBn\fP\\\\\fBn\fP\\		\fBc\fP(\fBr\fP) = sum_r' \fBf0\fP(\fBr\fP') \fBf1\fP(\fBr\fP - \fBr\fP') / (\fBN1\fP * \fBN2\fP)\\\fBn\fP\\\\\fBn\fP\\	you should first rotate the first image by 180 degrees.\\\fBn\fP\\\\\fBn\fP\\	Supply file name '-' to read from stdin.\\\fBn\fP\\\\\fBn\fP\\	Default output image format is BITPIX = -32 (\fBi\fP.\fBe\fP. 4-byte float).\\\fBn\fP\\\\\fBn\fP\\AUTHOR\\\fBn\fP\\	Nick Kaiser:  kaiser@cita.utoronto.ca\\\fBn\fP\\\\\fBn\fP\\\fBn\fP\\\fBn\fP'"
.br
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "\fBmain\fP (int argc, char *argv[])"
.br
.in -1c
.SH "Define Documentation"
.PP 
.SS "#define \fBusage\fP   '\\n\\\fBn\fP\\\fBn\fP\\NAME\\\fBn\fP\\	acf --- calculates 2-D autocorrelation function of \fBa\fP \fBfits\fP image\\\fBn\fP\\\\\fBn\fP\\SYNOPSIS\\\fBn\fP\\	acf [\fBoptions\fP...]\\\fBn\fP\\\\\fBn\fP\\DESCRIPTION\\\fBn\fP\\	'acf' reads \fBa\fP \fBfits\fP file from stdin and writes the autocorrelation\\\fBn\fP\\	function to stdout. If the input image is \fBfin\fP(\fBr\fP) then we compute\\\fBn\fP\\		\fBfout\fP(\fBr\fP) = sum_r' \fBfin\fP(\fBr\fP') \fBfin\fP(\fBr\fP' + \fBr\fP) / (\fBN1\fP * \fBN2\fP)\\\fBn\fP\\	and resulting image is wrapped so that zero lag is at \fBpixel\fP (\fBN1\fP/2, \fBN2\fP/2).\\\fBn\fP\\\\\fBn\fP\\	Options are:\\\fBn\fP\\		-p		# calculate power spectrum instead\\\fBn\fP\\		-\fBc\fP \fBf1\fP f2	# cross correlate named \fBfits\fP files\\\fBn\fP\\		-P pixtype	# output pixtype (FLOAT_PIXTYPE)\\\fBn\fP\\		-\fBn\fP		# no MAGIC substitution\\\fBn\fP\\		-\fBm\fP \fBmagicval\fP	# replacement for MAGIC pixels (0)   \\\fBn\fP\\\\\fBn\fP\\	Power is defined so that white noise with variance \fBsigma2\fP\\\fBn\fP\\	will produce P = \fBsigma2\fP. Power is translated so that zero frequency\\\fBn\fP\\	lies at \fBN1\fP/2, \fBN2\fP/2.\\\fBn\fP\\\\\fBn\fP\\	With '-\fBc\fP fits0 fits1' we compute\\\fBn\fP\\\\\fBn\fP\\		\fBc\fP(\fBr\fP) = sum_r' \fBf0\fP(\fBr\fP') \fBf1\fP(\fBr\fP' + \fBr\fP) / (\fBN1\fP * \fBN2\fP)\\\fBn\fP\\\\\fBn\fP\\	to compute instead\\\fBn\fP\\\\\fBn\fP\\		\fBc\fP(\fBr\fP) = sum_r' \fBf0\fP(\fBr\fP') \fBf1\fP(\fBr\fP - \fBr\fP') / (\fBN1\fP * \fBN2\fP)\\\fBn\fP\\\\\fBn\fP\\	you should first rotate the first image by 180 degrees.\\\fBn\fP\\\\\fBn\fP\\	Supply file name '-' to read from stdin.\\\fBn\fP\\\\\fBn\fP\\	Default output image format is BITPIX = -32 (\fBi\fP.\fBe\fP. 4-byte float).\\\fBn\fP\\\\\fBn\fP\\AUTHOR\\\fBn\fP\\	Nick Kaiser:  kaiser@cita.utoronto.ca\\\fBn\fP\\\\\fBn\fP\\\fBn\fP\\\fBn\fP'"
.PP
Definition at line 1 of file acf.c.
.SH "Function Documentation"
.PP 
.SS "main (int argc, char * argv[])"
.PP
Definition at line 55 of file acf.c.
.PP
References add_comment(), alloc_fft(), allocFloatArray(), allocFloatArray_shm(), argsinit(), ccf(), copyfitsheader(), error_exit, exit(), fft_type, flag, FLOAT_PIXTYPE, forward_fft(), getargf(), getargi(), getargs(), getflag(), i, j, M1, M2, N1, N2, power(), read2Dfloatimage(), read2Dfloatimage_shm(), setextpixtype(), shmfree(), substitute(), usage, and write2Dfloatimage().
.SH "Author"
.PP 
Generated automatically by Doxygen for imcat from the source code.
