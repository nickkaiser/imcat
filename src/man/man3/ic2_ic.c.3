.TH "ic.c" 3 "23 Dec 2003" "imcat" \" -*- nroff -*-
.ad l
.nh
.SH NAME
ic.c \- 
.SH SYNOPSIS
.br
.PP
\fC#include <stdio.h>\fP
.br
\fC#include <math.h>\fP
.br
\fC#include <stdlib.h>\fP
.br
\fC#include <string.h>\fP
.br
\fC#include <limits.h>\fP
.br
\fC#include '../../imlib/fits.h'\fP
.br
\fC#include 'error.h'\fP
.br
\fC#include '../../imtools/magic.h'\fP
.br
\fC#include 'getop.h'\fP
.br
\fC#include 'operators.h'\fP
.br
\fC#include 'ic.h'\fP
.br

.SS "Defines"

.in +1c
.ti -1c
.RI "#define \fBusage\fP   '\\n\\\fBn\fP\\NAME\\\fBn\fP\\		\fBic\fP -- image calculator\\\fBn\fP\\SYNOPSIS\\\fBn\fP\\		\fBic\fP [\fBoptions\fP....] rpnexpr fitsfile... \\\fBn\fP\\		where \fBoptions\fP are:\\\fBn\fP\\			-u 		# print \fBusage\fP\\\fBn\fP\\			-\fBc\fP \fBN1\fP \fBN2\fP	# create an image of this size\\\fBn\fP\\			-f		# force float format output\\\fBn\fP\\\\\fBn\fP\\DESCRIPTION\\\fBn\fP\\		\\'ic\\' does simple arithmetic on one or more images\\\fBn\fP\\		according to the reverse-polish notation expression 'rpnexpr'.\\\fBn\fP\\		Images are referred to in rpnexpr as '%%1', '%%2'.... and\\\fBn\fP\\		must all have the same size.  If the fitsfilename is given\\\fBn\fP\\		as '-' then that file will be read from stdin.\\\fBn\fP\\		If any of the input images is MAGIC (as defined 'magic.\fBh\fP')\\\fBn\fP\\		then the result will be MAGIC also.\\\fBn\fP\\		The functions supported include all of the standard \fBC\fP math\\\fBn\fP\\		library plus the operators '+', '-', '*', '/', and 'mult' \\\fBn\fP\\		is provided as \fBa\fP synonym for '*' to avoid potential problems\\\fBn\fP\\		if you invoke \fBic\fP from \fBa\fP script. There are the \fBlogical\fP\\\fBn\fP\\		operations '>', '<', '>=', '<=', '!=' and the negation operator\\\fBn\fP\\		'!'. There is \fBa\fP random \fBnumber\fP generator 'rand' and there are\\\fBn\fP\\		two functions 'xp', 'yp' to get the horixontal and vertical \fBpixel\fP\\\fBn\fP\\		positions respectively, and two further functions 'x', 'y' which\\\fBn\fP\\		return the position in units of the lenght of the side of\\\fBn\fP\\		the image.  There is \fBa\fP constant MAGIC (defined in magic.\fBh\fP - and\\\fBn\fP\\		currently set to -32768) which is \fBa\fP \fBflag\fP for bad \fBdata\fP.\\\fBn\fP\\		There is \fBa\fP function 'if' (\fBa\fP.\fBk\fP.\fBa\fP. '?') which mimics the \fBC\fP\\\fBn\fP\\		language '(\fBc\fP ? \fBt\fP : f)' which returns '\fBt\fP' or 'f' respectively\\\fBn\fP\\		depending on the truth or falseness of the condition '\fBc\fP'.  The\\\fBn\fP\\		rpn syntax for this expression is '\fBt\fP f \fBc\fP ?' in which '?' pops the\\\fBn\fP\\		condition '\fBc\fP' followed by 'f' and then '\fBt\fP' and pushes '\fBt\fP' or 'f'\\\fBn\fP\\		as appropriate. The condition '\fBc\fP' will of course most likely be\\\fBn\fP\\		\fBa\fP compound \fBlogical\fP expression.  There is also \fBa\fP function 'enter'\\\fBn\fP\\		which duplicates the top value of the \fBstack\fP.\\\fBn\fP\\		Use -\fBc\fP option (with no input images) to generate an image from\\\fBn\fP\\		scratch.  Use -f option to force output to be floating \fBpoint\fP.\\\fBn\fP\\		Otherwise the output will have same pixtype as input, or, with\\\fBn\fP\\		-\fBc\fP option, will have short (2 byte) pixels.\\\fBn\fP\\		Output goes to stdout.\\\fBn\fP\\\\\fBn\fP\\EXAMPLES\\\fBn\fP\\		Subtract \fBb\fP.\fBfits\fP from \fBa\fP.fits:\\\fBn\fP\\\\\fBn\fP\\			\fBic\fP '%%1 %%2 -' \fBa\fP.\fBfits\fP \fBb\fP.\fBfits\fP\\\fBn\fP\\\\\fBn\fP\\		Take sqrt of image to be read from stdin; output as float:\\\fBn\fP\\\\\fBn\fP\\			\fBic\fP -f '%%1 sqrt' -\\\fBn\fP\\\\\fBn\fP\\		Create \fBa\fP 512 x 512 image with \fBa\fP linear horizontal ramp and\\\fBn\fP\\		multiply by 10:\\\fBn\fP\\\\\fBn\fP\\			\fBic\fP -\fBc\fP 512 512 'x 10 *'\\\fBn\fP\\\\\fBn\fP\\		Replace all pixels in \fBa\fP.\fBfits\fP with value < 10 with MAGIC:\\\fBn\fP\\\\\fBn\fP\\			\fBic\fP '%%1 MAGIC %%1 10 > ?' \fBa\fP.\fBfits\fP\\\fBn\fP\\\\\fBn\fP\\\\\fBn\fP\\\fBn\fP\\\fBn\fP'"
.br
.ti -1c
.RI "#define \fBMAX_OPS\fP   1024"
.br
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "int \fBmain\fP (int argc, char *argv[])"
.br
.ti -1c
.RI "double \fBxp\fP (void)"
.br
.ti -1c
.RI "double \fByp\fP (void)"
.br
.ti -1c
.RI "double \fBx\fP (void)"
.br
.ti -1c
.RI "double \fBy\fP (void)"
.br
.in -1c
.SS "Variables"

.in +1c
.ti -1c
.RI "int \fBnim\fP = 0"
.br
.ti -1c
.RI "int \fBiy\fP"
.br
.ti -1c
.RI "int \fBN1\fP"
.br
.ti -1c
.RI "int \fBN2\fP"
.br
.ti -1c
.RI "int \fBix\fP"
.br
.ti -1c
.RI "float ** \fBf\fP"
.br
.in -1c
.SH "Define Documentation"
.PP 
.SS "#define MAX_OPS   1024"
.PP
Definition at line 79 of file ic2/ic.c.
.SS "#define \fBusage\fP   '\\n\\\fBn\fP\\NAME\\\fBn\fP\\		\fBic\fP -- image calculator\\\fBn\fP\\SYNOPSIS\\\fBn\fP\\		\fBic\fP [\fBoptions\fP....] rpnexpr fitsfile... \\\fBn\fP\\		where \fBoptions\fP are:\\\fBn\fP\\			-u 		# print \fBusage\fP\\\fBn\fP\\			-\fBc\fP \fBN1\fP \fBN2\fP	# create an image of this size\\\fBn\fP\\			-f		# force float format output\\\fBn\fP\\\\\fBn\fP\\DESCRIPTION\\\fBn\fP\\		\\'ic\\' does simple arithmetic on one or more images\\\fBn\fP\\		according to the reverse-polish notation expression 'rpnexpr'.\\\fBn\fP\\		Images are referred to in rpnexpr as '%%1', '%%2'.... and\\\fBn\fP\\		must all have the same size.  If the fitsfilename is given\\\fBn\fP\\		as '-' then that file will be read from stdin.\\\fBn\fP\\		If any of the input images is MAGIC (as defined 'magic.\fBh\fP')\\\fBn\fP\\		then the result will be MAGIC also.\\\fBn\fP\\		The functions supported include all of the standard \fBC\fP math\\\fBn\fP\\		library plus the operators '+', '-', '*', '/', and 'mult' \\\fBn\fP\\		is provided as \fBa\fP synonym for '*' to avoid potential problems\\\fBn\fP\\		if you invoke \fBic\fP from \fBa\fP script. There are the \fBlogical\fP\\\fBn\fP\\		operations '>', '<', '>=', '<=', '!=' and the negation operator\\\fBn\fP\\		'!'. There is \fBa\fP random \fBnumber\fP generator 'rand' and there are\\\fBn\fP\\		two functions 'xp', 'yp' to get the horixontal and vertical \fBpixel\fP\\\fBn\fP\\		positions respectively, and two further functions 'x', 'y' which\\\fBn\fP\\		return the position in units of the lenght of the side of\\\fBn\fP\\		the image.  There is \fBa\fP constant MAGIC (defined in magic.\fBh\fP - and\\\fBn\fP\\		currently set to -32768) which is \fBa\fP \fBflag\fP for bad \fBdata\fP.\\\fBn\fP\\		There is \fBa\fP function 'if' (\fBa\fP.\fBk\fP.\fBa\fP. '?') which mimics the \fBC\fP\\\fBn\fP\\		language '(\fBc\fP ? \fBt\fP : f)' which returns '\fBt\fP' or 'f' respectively\\\fBn\fP\\		depending on the truth or falseness of the condition '\fBc\fP'.  The\\\fBn\fP\\		rpn syntax for this expression is '\fBt\fP f \fBc\fP ?' in which '?' pops the\\\fBn\fP\\		condition '\fBc\fP' followed by 'f' and then '\fBt\fP' and pushes '\fBt\fP' or 'f'\\\fBn\fP\\		as appropriate. The condition '\fBc\fP' will of course most likely be\\\fBn\fP\\		\fBa\fP compound \fBlogical\fP expression.  There is also \fBa\fP function 'enter'\\\fBn\fP\\		which duplicates the top value of the \fBstack\fP.\\\fBn\fP\\		Use -\fBc\fP option (with no input images) to generate an image from\\\fBn\fP\\		scratch.  Use -f option to force output to be floating \fBpoint\fP.\\\fBn\fP\\		Otherwise the output will have same pixtype as input, or, with\\\fBn\fP\\		-\fBc\fP option, will have short (2 byte) pixels.\\\fBn\fP\\		Output goes to stdout.\\\fBn\fP\\\\\fBn\fP\\EXAMPLES\\\fBn\fP\\		Subtract \fBb\fP.\fBfits\fP from \fBa\fP.fits:\\\fBn\fP\\\\\fBn\fP\\			\fBic\fP '%%1 %%2 -' \fBa\fP.\fBfits\fP \fBb\fP.\fBfits\fP\\\fBn\fP\\\\\fBn\fP\\		Take sqrt of image to be read from stdin; output as float:\\\fBn\fP\\\\\fBn\fP\\			\fBic\fP -f '%%1 sqrt' -\\\fBn\fP\\\\\fBn\fP\\		Create \fBa\fP 512 x 512 image with \fBa\fP linear horizontal ramp and\\\fBn\fP\\		multiply by 10:\\\fBn\fP\\\\\fBn\fP\\			\fBic\fP -\fBc\fP 512 512 'x 10 *'\\\fBn\fP\\\\\fBn\fP\\		Replace all pixels in \fBa\fP.\fBfits\fP with value < 10 with MAGIC:\\\fBn\fP\\\\\fBn\fP\\			\fBic\fP '%%1 MAGIC %%1 10 > ?' \fBa\fP.\fBfits\fP\\\fBn\fP\\\\\fBn\fP\\\\\fBn\fP\\\fBn\fP\\\fBn\fP'"
.PP
Definition at line 1 of file ic2/ic.c.
.SH "Function Documentation"
.PP 
.SS "int main (int argc, char * argv[])"
.PP
Definition at line 86 of file ic2/ic.c.
.PP
References add_comment(), error_exit, exit(), f, ff, FLOAT_PIXTYPE, fread_fits_line(), funcarray, fwrite_fits_line(), get_input_pixtype(), getop(), ix, iy, M1, M2, MAGIC, MAX_OPS, N1, N2, nim, pop(), read_fits_head(), set_fits_ipf(), set_output_pixtype(), op::type, usage, and write_fits_head().
.SS "double x (void)"
.PP
Definition at line 225 of file ic2/ic.c.
.PP
References ix, and N1.
.SS "double xp (void)"
.PP
Definition at line 215 of file ic2/ic.c.
.PP
References ix.
.SS "double y (void)"
.PP
Definition at line 230 of file ic2/ic.c.
.PP
References iy, and N2.
.SS "double yp (void)"
.PP
Definition at line 220 of file ic2/ic.c.
.PP
References iy.
.SH "Variable Documentation"
.PP 
.SS "float** f"
.PP
Definition at line 84 of file ic2/ic.c.
.SS "int \fBix\fP"
.PP
Definition at line 83 of file ic2/ic.c.
.PP
Referenced by addarea(), addgalaxy(), allocgrid(), apphot(), assigncharge(), assigncharge_cic(), ccf(), cfilter(), contourplot(), fill_pixmap(), filter(), findpeak(), func(), fwrite_fits(), get_fft(), getcoords(), getgridcoords(), getneighbours(), getobjects(), getop(), getshape2(), getshape3(), getsky(), getsourceij(), ifunc(), iisdisplay(), imvalfunc(), main(), makebetamodel(), makemodel(), painttriangle(), power(), rfunc(), rpetrosian(), set_fft(), x(), xp(), and zap().
.SS "int \fBiy\fP\fC [static]\fP"
.PP
Definition at line 82 of file ic2/ic.c.
.PP
Referenced by main(), y(), and yp().
.SS "int \fBN1\fP\fC [static]\fP"
.PP
Definition at line 82 of file ic2/ic.c.
.SS "int \fBN2\fP\fC [static]\fP"
.PP
Definition at line 82 of file ic2/ic.c.
.SS "int \fBnim\fP = 0"
.PP
Definition at line 81 of file ic2/ic.c.
.SH "Author"
.PP 
Generated automatically by Doxygen for imcat from the source code.
