.TH "getshapes2.c" 3 "23 Dec 2003" "imcat" \" -*- nroff -*-
.ad l
.nh
.SH NAME
getshapes2.c \- 
.SH SYNOPSIS
.br
.PP
\fC#include <stdio.h>\fP
.br
\fC#include <math.h>\fP
.br
\fC#include <stdlib.h>\fP
.br
\fC#include <string.h>\fP
.br
\fC#include <limits.h>\fP
.br
\fC#include '../../catlib/cat.h'\fP
.br
\fC#include '../../imlib/fits.h'\fP
.br
\fC#include '../../utils/error.h'\fP
.br
\fC#include '../../utils/arrays.h'\fP
.br
\fC#include '../../utils/stats_stuff.h'\fP
.br
\fC#include 'getshape2.h'\fP
.br
\fC#include 'zap.h'\fP
.br

.SS "Defines"

.in +1c
.ti -1c
.RI "#define \fBusage\fP   '\\n\\\fBn\fP\\\fBn\fP\\NAME\\\fBn\fP\\	getshapes2 --- calculate ellipticities etc. for catalogue of objects\\\fBn\fP\\\\\fBn\fP\\SYNOPSIS\\\fBn\fP\\	getshapes2 psfimage rf [\fBoptions\fP...]\\\fBn\fP\\		-f fitsfile	# specify \fBfits\fP file explicitly\\\fBn\fP\\		-\fBi\fP 		# ignore the sky \fBbackground\fP information.\\\fBn\fP\\		-Z \fBr\fP \fBmul\fP	# ignore pixels within \fBmul\fP * \fBr\fP of other objects\\\fBn\fP\\\\\fBn\fP\\DESCRIPTION\\\fBn\fP\\	\\'getshapes2\\' is \fBa\fP catalogue filter which calculates polarisation\\\fBn\fP\\	and polarisability for objects.\\\fBn\fP\\\\\fBn\fP\\	It requires that the input catalogue contain at least position\\\fBn\fP\\	vector 'x[2]', and \fBa\fP (aperture) flux 'flux'.\\\fBn\fP\\\\\fBn\fP\\	It uses 'makekernel' to compute the kernels W[\fBi\fP] and K[\fBi\fP][\fBj\fP]\\\fBn\fP\\	from the psf supplied in the \fBfits\fP image 'psfimage' and\\\fBn\fP\\	then computes\\\fBn\fP\\		F 	= sum f[y][x] \fBw\fP[y][x]\\\fBn\fP\\		q[\fBl\fP] 	= sum f[y][x] W[\fBl\fP][y][x] / F\\\fBn\fP\\		P[\fBl\fP][\fBm\fP] = sum f[y][x] K[\fBl\fP][\fBm\fP][y][x] / F\\\fBn\fP\\		R[\fBm\fP]	= sum f[y][x] R[\fBm\fP][y][x] / F\\\fBn\fP\\	for \fBl\fP = 0,1,2 and \fBm\fP = 1,2\\\fBn\fP\\\\\fBn\fP\\	If sky \fBbackground\fP values (from getsky) are present they will\\\fBn\fP\\	be used (unless you give -\fBi\fP \fBflag\fP).\\\fBn\fP\\\\\fBn\fP\\	Use -Z option to zap circles around neighbouring objects.\\\fBn\fP\\\\\fBn\fP\\	By default the source image name is taken from the catalogue\\\fBn\fP\\	header \fBitem\fP 'fits_name', but you can specify alternative\\\fBn\fP\\	explicitly with -f option.\\\fBn\fP\\\\\fBn\fP\\\\\fBn\fP\\AUTHOR\\\fBn\fP\\	Nick Kaiser --- kaiser@cita.utoronto.ca\\\fBn\fP\\\\\fBn\fP\\\fBn\fP\\\fBn\fP'"
.br
.ti -1c
.RI "#define \fBMAGIC\fP   FLOAT_MAGIC"
.br
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "\fBmain\fP (int argc, char *argv[])"
.br
.in -1c
.SH "Define Documentation"
.PP 
.SS "#define MAGIC   FLOAT_MAGIC"
.PP
Definition at line 60 of file getshapes2.c.
.SS "#define \fBusage\fP   '\\n\\\fBn\fP\\\fBn\fP\\NAME\\\fBn\fP\\	getshapes2 --- calculate ellipticities etc. for catalogue of objects\\\fBn\fP\\\\\fBn\fP\\SYNOPSIS\\\fBn\fP\\	getshapes2 psfimage rf [\fBoptions\fP...]\\\fBn\fP\\		-f fitsfile	# specify \fBfits\fP file explicitly\\\fBn\fP\\		-\fBi\fP 		# ignore the sky \fBbackground\fP information.\\\fBn\fP\\		-Z \fBr\fP \fBmul\fP	# ignore pixels within \fBmul\fP * \fBr\fP of other objects\\\fBn\fP\\\\\fBn\fP\\DESCRIPTION\\\fBn\fP\\	\\'getshapes2\\' is \fBa\fP catalogue filter which calculates polarisation\\\fBn\fP\\	and polarisability for objects.\\\fBn\fP\\\\\fBn\fP\\	It requires that the input catalogue contain at least position\\\fBn\fP\\	vector 'x[2]', and \fBa\fP (aperture) flux 'flux'.\\\fBn\fP\\\\\fBn\fP\\	It uses 'makekernel' to compute the kernels W[\fBi\fP] and K[\fBi\fP][\fBj\fP]\\\fBn\fP\\	from the psf supplied in the \fBfits\fP image 'psfimage' and\\\fBn\fP\\	then computes\\\fBn\fP\\		F 	= sum f[y][x] \fBw\fP[y][x]\\\fBn\fP\\		q[\fBl\fP] 	= sum f[y][x] W[\fBl\fP][y][x] / F\\\fBn\fP\\		P[\fBl\fP][\fBm\fP] = sum f[y][x] K[\fBl\fP][\fBm\fP][y][x] / F\\\fBn\fP\\		R[\fBm\fP]	= sum f[y][x] R[\fBm\fP][y][x] / F\\\fBn\fP\\	for \fBl\fP = 0,1,2 and \fBm\fP = 1,2\\\fBn\fP\\\\\fBn\fP\\	If sky \fBbackground\fP values (from getsky) are present they will\\\fBn\fP\\	be used (unless you give -\fBi\fP \fBflag\fP).\\\fBn\fP\\\\\fBn\fP\\	Use -Z option to zap circles around neighbouring objects.\\\fBn\fP\\\\\fBn\fP\\	By default the source image name is taken from the catalogue\\\fBn\fP\\	header \fBitem\fP 'fits_name', but you can specify alternative\\\fBn\fP\\	explicitly with -f option.\\\fBn\fP\\\\\fBn\fP\\\\\fBn\fP\\AUTHOR\\\fBn\fP\\	Nick Kaiser --- kaiser@cita.utoronto.ca\\\fBn\fP\\\\\fBn\fP\\\fBn\fP\\\fBn\fP'"
.PP
Definition at line 5 of file getshapes2.c.
.SH "Function Documentation"
.PP 
.SS "main (int argc, char * argv[])"
.PP
Definition at line 62 of file getshapes2.c.
.PP
References addargscomment(), addobjectitem(), object::addrlist, allocFloatArray(), allocitemcontents(), allocobjectcontents(), allocShortArray(), BINARY_FILE_TYPE, connectobjecttocathead(), copycontentinfo(), copyheaderinfo(), error_exit, exit(), F(), f, fits, getheaderitemaddress(), getobjectitemindex(), getshape2(), cathead::headeritembase, inheritcontents(), ix, K, l, m, M1, M2, N1, N2, newitem(), newobject(), NUM_TYPE, read2Dfloatimage(), readcathead(), readobject(), setcatipf(), setcatopf(), setcatopfiletype(), UNZAP_MODE, usage, W, w, writecathead(), writeobject(), x, zap(), and ZAP_MODE.
.SH "Author"
.PP 
Generated automatically by Doxygen for imcat from the source code.
