.TH "invgrad.c" 3 "23 Dec 2003" "imcat" \" -*- nroff -*-
.ad l
.nh
.SH NAME
invgrad.c \- 
.SH SYNOPSIS
.br
.PP
\fC#include <stdio.h>\fP
.br
\fC#include <math.h>\fP
.br
\fC#include '../imlib/fits.h'\fP
.br
\fC#include '../utils/arrays.h'\fP
.br
\fC#include '../fftlib/myfft.h'\fP
.br

.SS "Defines"

.in +1c
.ti -1c
.RI "#define \fBusage\fP   '\\n\\NAME\\\fBn\fP\\	invgrad - take the inverse gradient of \fBa\fP \fBFITS\fP image\\\fBn\fP\\\\\fBn\fP\\SYNOPSIS\\\fBn\fP\\	invgrad\\\fBn\fP\\\\\fBn\fP\\DESCRIPTION\\\fBn\fP\\	'invgrad' applies inverse gradient operator to \fBa\fP gradient image\\\fBn\fP\\	using the FFT.  It reads \fBa\fP \fBN1\fP by \fBN2\fP by 2 image from stdin (in format\\\fBn\fP\\	as generated by 'grad') and writes \fBN1\fP by \fBN2\fP image to stdout.\\\fBn\fP\\	It works by first 'fixing' the end coumn of df/\fBdx\fP\\\fBn\fP\\	and the last row of df/\fBdy\fP to enforce periodic boundary conditions\\\fBn\fP\\	and we then apply the inverse discrete difference operator in \fBk\fP-space\\\fBn\fP\\	to generate two inverse gradient images (one from df/\fBdx\fP, one from\\\fBn\fP\\	df/\fBdy\fP) and we then combine these with weights\\\fBn\fP\\		w_x = k_x^2 / \fBk\fP^2\\\fBn\fP\\		w_y = k_y^2 / \fBk\fP^2\\\fBn\fP\\	and perform the inverse fourier \fBtransform\fP.\\\fBn\fP\\\\\fBn\fP\\AUTHOR\\\fBn\fP\\	Nick Kaiser:  kaiser@cita.utoronto.ca\\\fBn\fP\\\\\fBn\fP\\\fBn\fP'"
.br
.ti -1c
.RI "#define \fBEPS\fP   1.\fBe\fP-10"
.br
.ti -1c
.RI "#define \fBPI\fP   M_PI"
.br
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "float \fBzero\fP (float kx, float ky)"
.br
.ti -1c
.RI "float \fBinvkx\fP (float kx, float ky)"
.br
.ti -1c
.RI "float \fBinvky\fP (float kx, float ky)"
.br
.ti -1c
.RI "float \fBhalfx\fP (float kx, float ky)"
.br
.ti -1c
.RI "float \fBhalfy\fP (float kx, float ky)"
.br
.ti -1c
.RI "\fBmain\fP (int argc, char *argv[])"
.br
.in -1c
.SS "Variables"

.in +1c
.ti -1c
.RI "int \fBN1\fP"
.br
.ti -1c
.RI "int \fBN2\fP"
.br
.in -1c
.SH "Define Documentation"
.PP 
.SS "#define EPS   1.\fBe\fP-10"
.PP
Definition at line 36 of file invgrad.c.
.SS "#define PI   M_PI"
.PP
Definition at line 37 of file invgrad.c.
.SS "#define \fBusage\fP   '\\n\\NAME\\\fBn\fP\\	invgrad - take the inverse gradient of \fBa\fP \fBFITS\fP image\\\fBn\fP\\\\\fBn\fP\\SYNOPSIS\\\fBn\fP\\	invgrad\\\fBn\fP\\\\\fBn\fP\\DESCRIPTION\\\fBn\fP\\	'invgrad' applies inverse gradient operator to \fBa\fP gradient image\\\fBn\fP\\	using the FFT.  It reads \fBa\fP \fBN1\fP by \fBN2\fP by 2 image from stdin (in format\\\fBn\fP\\	as generated by 'grad') and writes \fBN1\fP by \fBN2\fP image to stdout.\\\fBn\fP\\	It works by first 'fixing' the end coumn of df/\fBdx\fP\\\fBn\fP\\	and the last row of df/\fBdy\fP to enforce periodic boundary conditions\\\fBn\fP\\	and we then apply the inverse discrete difference operator in \fBk\fP-space\\\fBn\fP\\	to generate two inverse gradient images (one from df/\fBdx\fP, one from\\\fBn\fP\\	df/\fBdy\fP) and we then combine these with weights\\\fBn\fP\\		w_x = k_x^2 / \fBk\fP^2\\\fBn\fP\\		w_y = k_y^2 / \fBk\fP^2\\\fBn\fP\\	and perform the inverse fourier \fBtransform\fP.\\\fBn\fP\\\\\fBn\fP\\AUTHOR\\\fBn\fP\\	Nick Kaiser:  kaiser@cita.utoronto.ca\\\fBn\fP\\\\\fBn\fP\\\fBn\fP'"
.PP
Definition at line 5 of file invgrad.c.
.SH "Function Documentation"
.PP 
.SS "float halfx (float kx, float ky)"
.PP
Definition at line 131 of file invgrad.c.
.PP
References a, N1, N2, and PI.
.PP
Referenced by main().
.SS "float halfy (float kx, float ky)"
.PP
Definition at line 146 of file invgrad.c.
.PP
References a, N1, N2, and PI.
.PP
Referenced by main().
.SS "float invkx (float kx, float ky)"
.PP
Definition at line 161 of file invgrad.c.
.PP
References a, N1, and PI.
.PP
Referenced by main().
.SS "float invky (float kx, float ky)"
.PP
Definition at line 175 of file invgrad.c.
.PP
References a, N2, and PI.
.PP
Referenced by main().
.SS "main (int argc, char * argv[])"
.PP
Definition at line 47 of file invgrad.c.
.PP
References add_comment(), alloc_fft(), allocFloatArray(), cfilter(), error_exit, exit(), f, fft_type, fits, forward_fft(), halfx(), halfy(), i, inverse_fft(), invkx(), invky(), j, fitsheader::n, N1, N2, fitsheader::ndim, readfitsheader(), readfitsline(), usage, and write2Dfloatimage().
.SS "float zero (float kx, float ky)"
.PP
Definition at line 125 of file invgrad.c.
.SH "Variable Documentation"
.PP 
.SS "int \fBN1\fP"
.PP
Definition at line 45 of file invgrad.c.
.SS "int \fBN2\fP"
.PP
Definition at line 45 of file invgrad.c.
.SH "Author"
.PP 
Generated automatically by Doxygen for imcat from the source code.
