.TH "apphotmain.c" 3 "23 Dec 2003" "imcat" \" -*- nroff -*-
.ad l
.nh
.SH NAME
apphotmain.c \- 
.SH SYNOPSIS
.br
.PP
\fC#include <stdio.h>\fP
.br
\fC#include <math.h>\fP
.br
\fC#include <stdlib.h>\fP
.br
\fC#include <string.h>\fP
.br
\fC#include <limits.h>\fP
.br
\fC#include '../../catlib/cat.h'\fP
.br
\fC#include '../../imlib/fits.h'\fP
.br
\fC#include '../../utils/error.h'\fP
.br
\fC#include '../../utils/arrays.h'\fP
.br
\fC#include '../../utils/iostream.h'\fP
.br
\fC#include '../../utils/stats_stuff.h'\fP
.br
\fC#include 'apphot.h'\fP
.br
\fC#include 'zap.h'\fP
.br

.SS "Defines"

.in +1c
.ti -1c
.RI "#define \fBusage\fP   '\\n\\\fBn\fP\\\fBn\fP\\NAME\\\fBn\fP\\	apphot --- perform aperture photometry\\\fBn\fP\\\\\fBn\fP\\SYNOPSIS\\\fBn\fP\\	apphot	[\fBoptions\fP...]\\\fBn\fP\\		-\fBm\fP \fBmul\fP		# r_aperture = \fBmul\fP * \fBr\fP (3.0)\\\fBn\fP\\		-\fBr\fP rname	# name for aperture \fBradius\fP ('rg')\\\fBn\fP\\		-R rap		# fixed aperture\\\fBn\fP\\		-f fitsfile	# specify \fBfits\fP file explicitly\\\fBn\fP\\		-\fBi\fP 		# ignore local sky parameters\\\fBn\fP\\		-s		# use local sky model from getsky\\\fBn\fP\\		-\fBz\fP zeropoint	# zeropoint for magnitude scale (20)\\\fBn\fP\\		-Z \fBr\fP \fBmul\fP	# ignore pixels within \fBmul\fP * \fBr\fP of other objects\\\fBn\fP\\		-\fBM\fP rapmax	# maximum aperture for photometry (50)\\\fBn\fP\\		-o		# send the source image to stdout followed by the catalog\\\fBn\fP\\\\\fBn\fP\\DESCRIPTION\\\fBn\fP\\	By default, 'apphot' measures flux and \fBmag\fP for aperture of \fBradius\fP\\\fBn\fP\\	\fBmul\fP * rg as determined by hfindpeaks, though you can use the -\fBr\fP\\\fBn\fP\\	(and optionally the -\fBm\fP option) to choose an alternative, or use\\\fBn\fP\\	the -R option to specify \fBa\fP fixed aperture.\\\fBn\fP\\\\\fBn\fP\\	It adds to the catalogue objects the following items\\\fBn\fP\\\\\fBn\fP\\		flux	# flux (sum of \fBpixel\fP values) within the aperture\\\fBn\fP\\		\fBmag\fP	# magnitude = zeropoint - 2.5 * log_10(flux)\\\fBn\fP\\		\fBrh\fP	# \fBradius\fP within which 1/2 of flux is found\\\fBn\fP\\		rp	# Petrosian \fBradius\fP\\\fBn\fP\\		rql	# \fBradius\fP within which 1/4 of flux is found\\\fBn\fP\\		rqu	# \fBradius\fP within which 3/4 of flux is found\\\fBn\fP\\		nbad	# \fBnumber\fP of magic pixels within the aperture\\\fBn\fP\\		\fBfmax\fP	# highest \fBpixel\fP value within aperture.   \\\fBn\fP\\\\\fBn\fP\\	The 'Petrosian' \fBradius\fP 'rp' is defined to be the first\\\fBn\fP\\	maximum in the cumulative enclosed flux divided by the \fBradius\fP.\\\fBn\fP\\	In \fBorder\fP to avoid assigning an unreasonably small petrosian radii\\\fBn\fP\\	to small objects where the centroid happens to lie very close to\\\fBn\fP\\	the centre of \fBa\fP \fBpixel\fP we 'soften' the radius: \fBr\fP -> sqrt(\fBr\fP^2 + 0.3^2)\\\fBn\fP\\\\\fBn\fP\\	Apphot takes all of the pixels whose centres fall within \fBa\fP distance\\\fBn\fP\\	less than r_aperture, sorts them by (softened) distance, and computes the\\\fBn\fP\\	half-light \fBradius\fP, and also the 'quartile' radii rql, rqu which\\\fBn\fP\\	contain 25 and 75 percent of the light respectively.\\\fBn\fP\\	It also outputs \fBa\fP count of 'bad pixels' nbad, which are pixels\\\fBn\fP\\	whose centres fall within the aperture, but are either MAGIC or\\\fBn\fP\\	lie off the image.\\\fBn\fP\\	To compute the magnitude it looks for zeropoint in the input catalogue\\\fBn\fP\\	header unless you override this with -\fBz\fP option.\\\fBn\fP\\\\\fBn\fP\\	It looks for \fBfits\fP \fBfilename\fP in the header variable 'fits_name'\\\fBn\fP\\	unless you specify alternative with -f option.  The argument here\\\fBn\fP\\	can be 'somecommand |' to generate the image on the fly.\\\fBn\fP\\\\\fBn\fP\\	With the -s option it will use local sky \fBbackground\fP parameters\\\fBn\fP\\	fb0 and dfb generated by getsky.  This used to be controlled\\\fBn\fP\\	by \fBa\fP header \fBitem\fP and could be overridden with the -\fBi\fP option.\\\fBn\fP\\	The -\fBi\fP option is now ignorred.\\\fBn\fP\\\\\fBn\fP\\	With the '-Z' option, we ignore pixels around other objects if\\\fBn\fP\\	distance is <= \fBr\fP * \fBmul\fP.\\\fBn\fP\\\\\fBn\fP\\	Objects with negative fluxes are assigned magnitude -100.0.\\\fBn\fP\\\\\fBn\fP\\	In \fBorder\fP to get good 'total' magnitudes, it is necessary that you\\\fBn\fP\\	use \fBa\fP good \fBradius\fP (big enough to get nearly all the light, but small\\\fBn\fP\\	enough to avoid counting neighbour \fBobject\fP light).  This is \fBa\fP tricky\\\fBn\fP\\	problem in general.  I have found that 'rg' computed by 'hfindpeaks'\\\fBn\fP\\	provides \fBa\fP good choice (that's why I adopted it as the default), but\\\fBn\fP\\	if you have \fBa\fP catalogue of objects with no decent size parameter\\\fBn\fP\\	\fBa\fP reasonable alternative is to run apphot to compute the petrosian\\\fBn\fP\\	\fBradius\fP using \fBa\fP fixed aperture of say 10 pixels, and then use \fBa\fP suitable\\\fBn\fP\\	multiple (say 2.0) of rp as the aperture for \fBa\fP second pass.\\\fBn\fP\\\\\fBn\fP\\AUTHOR\\\fBn\fP\\	Nick Kaiser --- kaiser@ifa.hawaii.edu\\\fBn\fP\\\\\fBn\fP\\\fBn\fP\\\fBn\fP'"
.br
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "\fBmain\fP (int argc, char *argv[])"
.br
.in -1c
.SH "Define Documentation"
.PP 
.SS "#define \fBusage\fP   '\\n\\\fBn\fP\\\fBn\fP\\NAME\\\fBn\fP\\	apphot --- perform aperture photometry\\\fBn\fP\\\\\fBn\fP\\SYNOPSIS\\\fBn\fP\\	apphot	[\fBoptions\fP...]\\\fBn\fP\\		-\fBm\fP \fBmul\fP		# r_aperture = \fBmul\fP * \fBr\fP (3.0)\\\fBn\fP\\		-\fBr\fP rname	# name for aperture \fBradius\fP ('rg')\\\fBn\fP\\		-R rap		# fixed aperture\\\fBn\fP\\		-f fitsfile	# specify \fBfits\fP file explicitly\\\fBn\fP\\		-\fBi\fP 		# ignore local sky parameters\\\fBn\fP\\		-s		# use local sky model from getsky\\\fBn\fP\\		-\fBz\fP zeropoint	# zeropoint for magnitude scale (20)\\\fBn\fP\\		-Z \fBr\fP \fBmul\fP	# ignore pixels within \fBmul\fP * \fBr\fP of other objects\\\fBn\fP\\		-\fBM\fP rapmax	# maximum aperture for photometry (50)\\\fBn\fP\\		-o		# send the source image to stdout followed by the catalog\\\fBn\fP\\\\\fBn\fP\\DESCRIPTION\\\fBn\fP\\	By default, 'apphot' measures flux and \fBmag\fP for aperture of \fBradius\fP\\\fBn\fP\\	\fBmul\fP * rg as determined by hfindpeaks, though you can use the -\fBr\fP\\\fBn\fP\\	(and optionally the -\fBm\fP option) to choose an alternative, or use\\\fBn\fP\\	the -R option to specify \fBa\fP fixed aperture.\\\fBn\fP\\\\\fBn\fP\\	It adds to the catalogue objects the following items\\\fBn\fP\\\\\fBn\fP\\		flux	# flux (sum of \fBpixel\fP values) within the aperture\\\fBn\fP\\		\fBmag\fP	# magnitude = zeropoint - 2.5 * log_10(flux)\\\fBn\fP\\		\fBrh\fP	# \fBradius\fP within which 1/2 of flux is found\\\fBn\fP\\		rp	# Petrosian \fBradius\fP\\\fBn\fP\\		rql	# \fBradius\fP within which 1/4 of flux is found\\\fBn\fP\\		rqu	# \fBradius\fP within which 3/4 of flux is found\\\fBn\fP\\		nbad	# \fBnumber\fP of magic pixels within the aperture\\\fBn\fP\\		\fBfmax\fP	# highest \fBpixel\fP value within aperture.   \\\fBn\fP\\\\\fBn\fP\\	The 'Petrosian' \fBradius\fP 'rp' is defined to be the first\\\fBn\fP\\	maximum in the cumulative enclosed flux divided by the \fBradius\fP.\\\fBn\fP\\	In \fBorder\fP to avoid assigning an unreasonably small petrosian radii\\\fBn\fP\\	to small objects where the centroid happens to lie very close to\\\fBn\fP\\	the centre of \fBa\fP \fBpixel\fP we 'soften' the radius: \fBr\fP -> sqrt(\fBr\fP^2 + 0.3^2)\\\fBn\fP\\\\\fBn\fP\\	Apphot takes all of the pixels whose centres fall within \fBa\fP distance\\\fBn\fP\\	less than r_aperture, sorts them by (softened) distance, and computes the\\\fBn\fP\\	half-light \fBradius\fP, and also the 'quartile' radii rql, rqu which\\\fBn\fP\\	contain 25 and 75 percent of the light respectively.\\\fBn\fP\\	It also outputs \fBa\fP count of 'bad pixels' nbad, which are pixels\\\fBn\fP\\	whose centres fall within the aperture, but are either MAGIC or\\\fBn\fP\\	lie off the image.\\\fBn\fP\\	To compute the magnitude it looks for zeropoint in the input catalogue\\\fBn\fP\\	header unless you override this with -\fBz\fP option.\\\fBn\fP\\\\\fBn\fP\\	It looks for \fBfits\fP \fBfilename\fP in the header variable 'fits_name'\\\fBn\fP\\	unless you specify alternative with -f option.  The argument here\\\fBn\fP\\	can be 'somecommand |' to generate the image on the fly.\\\fBn\fP\\\\\fBn\fP\\	With the -s option it will use local sky \fBbackground\fP parameters\\\fBn\fP\\	fb0 and dfb generated by getsky.  This used to be controlled\\\fBn\fP\\	by \fBa\fP header \fBitem\fP and could be overridden with the -\fBi\fP option.\\\fBn\fP\\	The -\fBi\fP option is now ignorred.\\\fBn\fP\\\\\fBn\fP\\	With the '-Z' option, we ignore pixels around other objects if\\\fBn\fP\\	distance is <= \fBr\fP * \fBmul\fP.\\\fBn\fP\\\\\fBn\fP\\	Objects with negative fluxes are assigned magnitude -100.0.\\\fBn\fP\\\\\fBn\fP\\	In \fBorder\fP to get good 'total' magnitudes, it is necessary that you\\\fBn\fP\\	use \fBa\fP good \fBradius\fP (big enough to get nearly all the light, but small\\\fBn\fP\\	enough to avoid counting neighbour \fBobject\fP light).  This is \fBa\fP tricky\\\fBn\fP\\	problem in general.  I have found that 'rg' computed by 'hfindpeaks'\\\fBn\fP\\	provides \fBa\fP good choice (that's why I adopted it as the default), but\\\fBn\fP\\	if you have \fBa\fP catalogue of objects with no decent size parameter\\\fBn\fP\\	\fBa\fP reasonable alternative is to run apphot to compute the petrosian\\\fBn\fP\\	\fBradius\fP using \fBa\fP fixed aperture of say 10 pixels, and then use \fBa\fP suitable\\\fBn\fP\\	multiple (say 2.0) of rp as the aperture for \fBa\fP second pass.\\\fBn\fP\\\\\fBn\fP\\AUTHOR\\\fBn\fP\\	Nick Kaiser --- kaiser@ifa.hawaii.edu\\\fBn\fP\\\\\fBn\fP\\\fBn\fP\\\fBn\fP'"
.PP
Definition at line 5 of file apphotmain.c.
.SH "Function Documentation"
.PP 
.SS "main (int argc, char * argv[])"
.PP
Definition at line 100 of file apphotmain.c.
.PP
References add_comment(), addargscomment(), addobjectitem(), object::addrlist, allocFloatArray(), allocitemcontents(), allocobjectcontents(), allocShortArray(), apphot(), BINARY_FILE_TYPE, connectobjecttocathead(), copycontentinfo(), copyheaderinfo(), error_exit, exit(), iostream::f, f, fits, getheaderitemaddress(), getobjectitemindex(), inheritcontents(), ix, mag, N1, N2, newitem(), newobject(), NUM_TYPE, openiostream(), r, read2Dfloatimage(), readcathead(), readobject(), rh, setcatipf(), setcatopf(), setcatopfiletype(), UNZAP_MODE, usage, writecathead(), writefitsheader(), writefitsplane(), writeobject(), x, zap(), and ZAP_MODE.
.SH "Author"
.PP 
Generated automatically by Doxygen for imcat from the source code.
