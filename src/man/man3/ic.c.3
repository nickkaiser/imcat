.TH "ic.c" 3 "23 Dec 2003" "imcat" \" -*- nroff -*-
.ad l
.nh
.SH NAME
ic.c \- 
.SH SYNOPSIS
.br
.PP
\fC#include <stdio.h>\fP
.br
\fC#include <math.h>\fP
.br
\fC#include <stdlib.h>\fP
.br
\fC#include <string.h>\fP
.br
\fC#include <limits.h>\fP
.br
\fC#include '../../imlib/fits.h'\fP
.br
\fC#include 'error.h'\fP
.br
\fC#include 'utils/iostream.h'\fP
.br
\fC#include 'getop.h'\fP
.br
\fC#include 'ic.h'\fP
.br

.SS "Defines"

.in +1c
.ti -1c
.RI "#define \fBusage\fP   '\\n\\\fBn\fP\\NAME\\\fBn\fP\\		\fBic\fP -- image calculator\\\fBn\fP\\SYNOPSIS\\\fBn\fP\\		\fBic\fP [\fBoptions\fP....] rpnexpr fitsfile... \\\fBn\fP\\		where \fBoptions\fP are:\\\fBn\fP\\			-u 		# print \fBusage\fP\\\fBn\fP\\			-\fBc\fP \fBN1\fP \fBN2\fP	# create an image of this size\\\fBn\fP\\			-p pixtype	# specify output pixtype\\\fBn\fP\\			-s \fBseed\fP		# \fBseed\fP rand num generator\\\fBn\fP\\			-\fBm\fP magicsub	# substitute magic value\\\fBn\fP\\			-\fBh\fP name \fBval\fP	# add header \fBcomment\fP 'name = \fBval\fP'\\\fBn\fP\\			-\fBb\fP BSCALE BZERO	# add scaling header information\\\fBn\fP\\\\\fBn\fP\\DESCRIPTION\\\fBn\fP\\		\\'ic\\' does arithmetic on one or more images\\\fBn\fP\\		according to the reverse-polish notation expression 'rpnexpr'.\\\fBn\fP\\		Images are referred to in rpnexpr as '%%1', '%%2'.... and\\\fBn\fP\\		must all have the same size.  If the fitsfilename is given\\\fBn\fP\\		as '-' then that file will be read from stdin.\\\fBn\fP\\		If fitsfilename is given as 'command |' then we read\\\fBn\fP\\		from \fBa\fP pipe executing that command.\\\fBn\fP\\\\\fBn\fP\\		'\fBic\fP' operates on images \fBa\fP \fBline\fP at \fBa\fP time, and so can be used\\\fBn\fP\\		on very large images.  \fBA\fP reference to an input image such as\\\fBn\fP\\		'%%1' causes \fBa\fP \fBline\fP of that image to be pushed onto \fBa\fP \fBstack\fP.\\\fBn\fP\\		Single argument math functions operate on the \fBline\fP at the top\\\fBn\fP\\		of the \fBstack\fP and multi-argument functions pop lines as\\\fBn\fP\\		necessary and then push the resultant \fBline\fP.\\\fBn\fP\\\\\fBn\fP\\		If any of the input images is flagged as MAGIC (as defined '\fBfits\fP.\fBh\fP')\\\fBn\fP\\		then the result will be MAGIC also (though with '-\fBm\fP' option\\\fBn\fP\\		'\fBic\fP' will output 'magicsub' in place of the usual SHRT_MIN)\\\fBn\fP\\\\\fBn\fP\\		Fits header comments are inherited from the first image - other\\\fBn\fP\\		comments are discarded.  You may add extra comments with the -\fBh\fP\\\fBn\fP\\		option; see below.\\\fBn\fP\\\\\fBn\fP\\		The functions supported include all of the standard \fBC\fP math\\\fBn\fP\\		library (including bessel functions j0(x), j1(x),\\\fBn\fP\\		jn(\fBn\fP,x), y0(x), y1(x), yn(\fBn\fP,x))\\\fBn\fP\\		plus the operators '+', '-', '*', '/', and 'mult' \\\fBn\fP\\		is provided as \fBa\fP synonym for '*' to avoid potential problems\\\fBn\fP\\		if you invoke \fBic\fP from \fBa\fP script. There are the \fBlogical\fP\\\fBn\fP\\		operations '>', '<', '>=', '<=', '!=', '==' and the negation operator\\\fBn\fP\\		'!'. There is \fBa\fP random \fBnumber\fP generator 'rand' which generates\\\fBn\fP\\		\fBa\fP uniform random \fBnumber\fP on the range 0.0-1.0 and 'grand' which\\\fBn\fP\\		generates \fBa\fP zero-mean, unit variance normal variate. There are\\\fBn\fP\\		two functions 'xp', 'yp' to get the horixontal and vertical \fBpixel\fP\\\fBn\fP\\		positions respectively, and two further functions 'x', 'y' which\\\fBn\fP\\		return the position in units of the lenght of the side of\\\fBn\fP\\		the image.  There is \fBa\fP constant MAGIC (defined in magic.\fBh\fP - and\\\fBn\fP\\		currently set to -32768) which is \fBa\fP \fBflag\fP for bad \fBdata\fP.\\\fBn\fP\\		There is \fBa\fP function 'if' (\fBa\fP.\fBk\fP.\fBa\fP. '?') which mimics the \fBC\fP\\\fBn\fP\\		language '(\fBc\fP ? \fBt\fP : f)' which returns '\fBt\fP' or 'f' respectively\\\fBn\fP\\		depending on the truth or falseness of the condition '\fBc\fP'.  The\\\fBn\fP\\		rpn syntax for this expression is '\fBt\fP f \fBc\fP ?' in which '?' pops the\\\fBn\fP\\		condition '\fBc\fP' followed by 'f' and then '\fBt\fP' and pushes '\fBt\fP' or 'f'\\\fBn\fP\\		as appropriate. The condition '\fBc\fP' will of course most likely be\\\fBn\fP\\		\fBa\fP compound \fBlogical\fP expression.  There are functions 'max' and 'min'\\\fBn\fP\\		which pop two values and pushes the maximum or minimum respectively.\\\fBn\fP\\\\\fBn\fP\\		There is also \fBa\fP function 'enter' which duplicates the top value of\\\fBn\fP\\		the \fBstack\fP, and \fBa\fP function 'swap' which unsurprisingly\\\fBn\fP\\		swaps the top two values on the \fBstack\fP.\\\fBn\fP\\\\\fBn\fP\\		Use -\fBc\fP option (with no input images) to generate an image from\\\fBn\fP\\		scratch.\\\fBn\fP\\\\\fBn\fP\\		Use -p option to specify output pixtpye which can be one of\\\fBn\fP\\			  8	# 1-byte unsigned char\\\fBn\fP\\			 16	# 2-byte signed \fBinteger\fP\\\fBn\fP\\			 32	# 4-byte signed int\\\fBn\fP\\			-32	# 4-byte floating \fBpoint\fP\\\fBn\fP\\			-64	# 8-byte floating \fBpoint\fP   \\\fBn\fP\\		Otherwise the output will have same pixtype as that of the first\\\fBn\fP\\		input image, or, with -\fBc\fP option, will have pixtype -32.\\\fBn\fP\\\\\fBn\fP\\		Use the -\fBb\fP option to apply scaling of \fBpixel\fP values on\\\fBn\fP\\		output and record the BSCALE, BZERO values in the header.\\\fBn\fP\\		Otherwise the BSCALE, BZERO values (if any) are inherited\\\fBn\fP\\		from the (first) input image.\\\fBn\fP\\		The definition of BSCALE and BZERO is such that the internal\\\fBn\fP\\		values are computed from disk values as:\\\fBn\fP\\\\\fBn\fP\\			f_internal = BZERO + BSCALE * f_disk\\\fBn\fP\\\\\fBn\fP\\		Output goes to stdout.\\\fBn\fP\\\\\fBn\fP\\		The '-\fBh\fP' option can be used to add new header values or\\\fBn\fP\\		to modify existing ones.  If an existing name is provided\\\fBn\fP\\		then the existing value will be overwritten with the new value.\\\fBn\fP\\		Otherwise, or if the name is 'HISTORY' or 'COMMENT', the new header \fBline\fP\\\fBn\fP\\		will be appended.  The -\fBh\fP option can be given repeatedly to\\\fBn\fP\\		insert \fBa\fP \fBnumber\fP of comments.\\\fBn\fP\\\\\fBn\fP\\EXAMPLES\\\fBn\fP\\		Subtract \fBb\fP.\fBfits\fP from \fBa\fP.fits:\\\fBn\fP\\\\\fBn\fP\\			\fBic\fP '%%1 %%2 -' \fBa\fP.\fBfits\fP \fBb\fP.\fBfits\fP\\\fBn\fP\\\\\fBn\fP\\		Take sqrt of image to be read from stdin; output as float:\\\fBn\fP\\\\\fBn\fP\\			\fBic\fP -p -32 '%%1 sqrt' -\\\fBn\fP\\\\\fBn\fP\\		Create \fBa\fP 512 x 512 image with \fBa\fP linear horizontal ramp and\\\fBn\fP\\		multiply by 10:\\\fBn\fP\\\\\fBn\fP\\			\fBic\fP -\fBc\fP 512 512 'x 10 *'\\\fBn\fP\\\\\fBn\fP\\		Replace all pixels in \fBa\fP.\fBfits\fP with value < 10 with MAGIC:\\\fBn\fP\\\\\fBn\fP\\			\fBic\fP '%%1 MAGIC %%1 10 > ?' \fBa\fP.\fBfits\fP\\\fBn\fP\\\\\fBn\fP\\		Filter to clip image at \fBfmin\fP = 0.25 \fBfmax\fP = 0.75:\\\fBn\fP\\\\\fBn\fP\\			\fBic\fP '%%1 0.25 max 0.75 min' -\\\fBn\fP\\\\\fBn\fP\\AUTHOR\\\fBn\fP\\		Nick Kaiser - kaiser@hawaii.edu\\\fBn\fP\\\\\fBn\fP\\\fBn\fP\\\fBn\fP'"
.br
.ti -1c
.RI "#define \fBLOOP\fP   for(\fBix\fP=0;\fBix\fP<\fBN1\fP;\fBix\fP++)"
.br
.ti -1c
.RI "#define \fBMAX_OPS\fP   1024"
.br
.ti -1c
.RI "#define \fBSTACK_DEPTH\fP   100"
.br
.ti -1c
.RI "#define \fBMAX_NEW_COMMENTS\fP   100"
.br
.ti -1c
.RI "#define \fBMAGIC\fP   FLOAT_MAGIC"
.br
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "double \fBdrand48\fP ()"
.br
.ti -1c
.RI "int \fBmain\fP (int argc, char *argv[])"
.br
.ti -1c
.RI "double \fBxp\fP (void)"
.br
.ti -1c
.RI "double \fByp\fP (void)"
.br
.ti -1c
.RI "double \fBx\fP (void)"
.br
.ti -1c
.RI "double \fBy\fP (void)"
.br
.ti -1c
.RI "double \fBgasdev\fP (void)"
.br
.in -1c
.SS "Variables"

.in +1c
.ti -1c
.RI "double * \fBst\fP [STACK_DEPTH]"
.br
.ti -1c
.RI "int \fBpos\fP"
.br
.ti -1c
.RI "int \fBnim\fP = 0"
.br
.ti -1c
.RI "int \fBix\fP"
.br
.ti -1c
.RI "int \fBiy\fP"
.br
.ti -1c
.RI "int \fBN1\fP"
.br
.ti -1c
.RI "int \fBN2\fP"
.br
.ti -1c
.RI "float ** \fBf\fP"
.br
.in -1c
.SH "Define Documentation"
.PP 
.SS "#define LOOP   for(\fBix\fP=0;\fBix\fP<\fBN1\fP;\fBix\fP++)"
.PP
Definition at line 137 of file ic.c.
.PP
Referenced by main().
.SS "#define MAGIC   FLOAT_MAGIC"
.PP
Definition at line 150 of file ic.c.
.SS "#define MAX_NEW_COMMENTS   100"
.PP
Definition at line 148 of file ic.c.
.PP
Referenced by main().
.SS "#define MAX_OPS   1024"
.PP
Definition at line 139 of file ic.c.
.SS "#define STACK_DEPTH   100"
.PP
Definition at line 140 of file ic.c.
.SS "#define \fBusage\fP   '\\n\\\fBn\fP\\NAME\\\fBn\fP\\		\fBic\fP -- image calculator\\\fBn\fP\\SYNOPSIS\\\fBn\fP\\		\fBic\fP [\fBoptions\fP....] rpnexpr fitsfile... \\\fBn\fP\\		where \fBoptions\fP are:\\\fBn\fP\\			-u 		# print \fBusage\fP\\\fBn\fP\\			-\fBc\fP \fBN1\fP \fBN2\fP	# create an image of this size\\\fBn\fP\\			-p pixtype	# specify output pixtype\\\fBn\fP\\			-s \fBseed\fP		# \fBseed\fP rand num generator\\\fBn\fP\\			-\fBm\fP magicsub	# substitute magic value\\\fBn\fP\\			-\fBh\fP name \fBval\fP	# add header \fBcomment\fP 'name = \fBval\fP'\\\fBn\fP\\			-\fBb\fP BSCALE BZERO	# add scaling header information\\\fBn\fP\\\\\fBn\fP\\DESCRIPTION\\\fBn\fP\\		\\'ic\\' does arithmetic on one or more images\\\fBn\fP\\		according to the reverse-polish notation expression 'rpnexpr'.\\\fBn\fP\\		Images are referred to in rpnexpr as '%%1', '%%2'.... and\\\fBn\fP\\		must all have the same size.  If the fitsfilename is given\\\fBn\fP\\		as '-' then that file will be read from stdin.\\\fBn\fP\\		If fitsfilename is given as 'command |' then we read\\\fBn\fP\\		from \fBa\fP pipe executing that command.\\\fBn\fP\\\\\fBn\fP\\		'\fBic\fP' operates on images \fBa\fP \fBline\fP at \fBa\fP time, and so can be used\\\fBn\fP\\		on very large images.  \fBA\fP reference to an input image such as\\\fBn\fP\\		'%%1' causes \fBa\fP \fBline\fP of that image to be pushed onto \fBa\fP \fBstack\fP.\\\fBn\fP\\		Single argument math functions operate on the \fBline\fP at the top\\\fBn\fP\\		of the \fBstack\fP and multi-argument functions pop lines as\\\fBn\fP\\		necessary and then push the resultant \fBline\fP.\\\fBn\fP\\\\\fBn\fP\\		If any of the input images is flagged as MAGIC (as defined '\fBfits\fP.\fBh\fP')\\\fBn\fP\\		then the result will be MAGIC also (though with '-\fBm\fP' option\\\fBn\fP\\		'\fBic\fP' will output 'magicsub' in place of the usual SHRT_MIN)\\\fBn\fP\\\\\fBn\fP\\		Fits header comments are inherited from the first image - other\\\fBn\fP\\		comments are discarded.  You may add extra comments with the -\fBh\fP\\\fBn\fP\\		option; see below.\\\fBn\fP\\\\\fBn\fP\\		The functions supported include all of the standard \fBC\fP math\\\fBn\fP\\		library (including bessel functions j0(x), j1(x),\\\fBn\fP\\		jn(\fBn\fP,x), y0(x), y1(x), yn(\fBn\fP,x))\\\fBn\fP\\		plus the operators '+', '-', '*', '/', and 'mult' \\\fBn\fP\\		is provided as \fBa\fP synonym for '*' to avoid potential problems\\\fBn\fP\\		if you invoke \fBic\fP from \fBa\fP script. There are the \fBlogical\fP\\\fBn\fP\\		operations '>', '<', '>=', '<=', '!=', '==' and the negation operator\\\fBn\fP\\		'!'. There is \fBa\fP random \fBnumber\fP generator 'rand' which generates\\\fBn\fP\\		\fBa\fP uniform random \fBnumber\fP on the range 0.0-1.0 and 'grand' which\\\fBn\fP\\		generates \fBa\fP zero-mean, unit variance normal variate. There are\\\fBn\fP\\		two functions 'xp', 'yp' to get the horixontal and vertical \fBpixel\fP\\\fBn\fP\\		positions respectively, and two further functions 'x', 'y' which\\\fBn\fP\\		return the position in units of the lenght of the side of\\\fBn\fP\\		the image.  There is \fBa\fP constant MAGIC (defined in magic.\fBh\fP - and\\\fBn\fP\\		currently set to -32768) which is \fBa\fP \fBflag\fP for bad \fBdata\fP.\\\fBn\fP\\		There is \fBa\fP function 'if' (\fBa\fP.\fBk\fP.\fBa\fP. '?') which mimics the \fBC\fP\\\fBn\fP\\		language '(\fBc\fP ? \fBt\fP : f)' which returns '\fBt\fP' or 'f' respectively\\\fBn\fP\\		depending on the truth or falseness of the condition '\fBc\fP'.  The\\\fBn\fP\\		rpn syntax for this expression is '\fBt\fP f \fBc\fP ?' in which '?' pops the\\\fBn\fP\\		condition '\fBc\fP' followed by 'f' and then '\fBt\fP' and pushes '\fBt\fP' or 'f'\\\fBn\fP\\		as appropriate. The condition '\fBc\fP' will of course most likely be\\\fBn\fP\\		\fBa\fP compound \fBlogical\fP expression.  There are functions 'max' and 'min'\\\fBn\fP\\		which pop two values and pushes the maximum or minimum respectively.\\\fBn\fP\\\\\fBn\fP\\		There is also \fBa\fP function 'enter' which duplicates the top value of\\\fBn\fP\\		the \fBstack\fP, and \fBa\fP function 'swap' which unsurprisingly\\\fBn\fP\\		swaps the top two values on the \fBstack\fP.\\\fBn\fP\\\\\fBn\fP\\		Use -\fBc\fP option (with no input images) to generate an image from\\\fBn\fP\\		scratch.\\\fBn\fP\\\\\fBn\fP\\		Use -p option to specify output pixtpye which can be one of\\\fBn\fP\\			  8	# 1-byte unsigned char\\\fBn\fP\\			 16	# 2-byte signed \fBinteger\fP\\\fBn\fP\\			 32	# 4-byte signed int\\\fBn\fP\\			-32	# 4-byte floating \fBpoint\fP\\\fBn\fP\\			-64	# 8-byte floating \fBpoint\fP   \\\fBn\fP\\		Otherwise the output will have same pixtype as that of the first\\\fBn\fP\\		input image, or, with -\fBc\fP option, will have pixtype -32.\\\fBn\fP\\\\\fBn\fP\\		Use the -\fBb\fP option to apply scaling of \fBpixel\fP values on\\\fBn\fP\\		output and record the BSCALE, BZERO values in the header.\\\fBn\fP\\		Otherwise the BSCALE, BZERO values (if any) are inherited\\\fBn\fP\\		from the (first) input image.\\\fBn\fP\\		The definition of BSCALE and BZERO is such that the internal\\\fBn\fP\\		values are computed from disk values as:\\\fBn\fP\\\\\fBn\fP\\			f_internal = BZERO + BSCALE * f_disk\\\fBn\fP\\\\\fBn\fP\\		Output goes to stdout.\\\fBn\fP\\\\\fBn\fP\\		The '-\fBh\fP' option can be used to add new header values or\\\fBn\fP\\		to modify existing ones.  If an existing name is provided\\\fBn\fP\\		then the existing value will be overwritten with the new value.\\\fBn\fP\\		Otherwise, or if the name is 'HISTORY' or 'COMMENT', the new header \fBline\fP\\\fBn\fP\\		will be appended.  The -\fBh\fP option can be given repeatedly to\\\fBn\fP\\		insert \fBa\fP \fBnumber\fP of comments.\\\fBn\fP\\\\\fBn\fP\\EXAMPLES\\\fBn\fP\\		Subtract \fBb\fP.\fBfits\fP from \fBa\fP.fits:\\\fBn\fP\\\\\fBn\fP\\			\fBic\fP '%%1 %%2 -' \fBa\fP.\fBfits\fP \fBb\fP.\fBfits\fP\\\fBn\fP\\\\\fBn\fP\\		Take sqrt of image to be read from stdin; output as float:\\\fBn\fP\\\\\fBn\fP\\			\fBic\fP -p -32 '%%1 sqrt' -\\\fBn\fP\\\\\fBn\fP\\		Create \fBa\fP 512 x 512 image with \fBa\fP linear horizontal ramp and\\\fBn\fP\\		multiply by 10:\\\fBn\fP\\\\\fBn\fP\\			\fBic\fP -\fBc\fP 512 512 'x 10 *'\\\fBn\fP\\\\\fBn\fP\\		Replace all pixels in \fBa\fP.\fBfits\fP with value < 10 with MAGIC:\\\fBn\fP\\\\\fBn\fP\\			\fBic\fP '%%1 MAGIC %%1 10 > ?' \fBa\fP.\fBfits\fP\\\fBn\fP\\\\\fBn\fP\\		Filter to clip image at \fBfmin\fP = 0.25 \fBfmax\fP = 0.75:\\\fBn\fP\\\\\fBn\fP\\			\fBic\fP '%%1 0.25 max 0.75 min' -\\\fBn\fP\\\\\fBn\fP\\AUTHOR\\\fBn\fP\\		Nick Kaiser - kaiser@hawaii.edu\\\fBn\fP\\\\\fBn\fP\\\fBn\fP\\\fBn\fP'"
.PP
Definition at line 1 of file ic.c.
.SH "Function Documentation"
.PP 
.SS "double drand48 ()"
.PP
.SS "double gasdev (void)"
.PP
Definition at line 607 of file ic.c.
.SS "int main (int argc, char * argv[])"
.PP
Definition at line 154 of file ic.c.
.PP
References ACOS, add_comment(), appendcomment(), ASIN, ATAN, ATAN2, BESSJ0, BESSJ1, BESSJN, BESSY0, BESSY1, BESSYN, fitsheader::bscale, fitsheader::bscaling, fitsheader::bzero, CEIL, CONSTANT_TYPE, copyfitsheader(), COS, COSH, op::data, DBL_PIXTYPE, DIVIDE, drand48(), ENTER, EQ, error_exit, exit(), EXP, fitsheader::extpixtype, f, FABS, ff, fits, FLOAT_PIXTYPE, FLOOR, FMOD, gasdev(), GE, getop(), GRAND, GT, IF, IFQ, IM_VALUE_TYPE, INT_PIXTYPE, ix, iy, LE, LOG, LOG10, LOOP, LT, M1, M2, MAGIC, MAX, MAX_NEW_COMMENTS, MAX_OPS, MIN, MINUS, fitsheader::n, N1, N2, fitsheader::ndim, NE, new2Dfitsheader(), newtextcomment(), nim, NOT, NUM0_FUNC_TYPE, NUM1_FUNC_TYPE, NUM2_FUNC_TYPE, openiostream(), op::opno, PLUS, pos, POW, RAND, readfitsheader(), readfitsline(), removenamedcomments(), set_getop_N1(), SHORT_PIXTYPE, SIN, SINH, SQRT, st, STACK_DEPTH, SWAP, TAN, TANH, TIMES0, TIMES1, op::type, UCHAR_PIXTYPE, usage, writefitsheader(), writefitsline(), writefitstail(), x(), X, xp(), XP, y(), Y, yp(), and YP.
.SS "double x (void)"
.PP
Definition at line 597 of file ic.c.
.PP
Referenced by main().
.SS "double xp (void)"
.PP
Definition at line 587 of file ic.c.
.PP
Referenced by cdl_doCircleMark(), cdl_doEllipseMark(), cdl_doPointMark(), cdl_doPolygonMark(), contourplot(), cycleimage(), eqstrn(), func(), getxcoords(), inversegetxcoords(), main(), makemodel(), num0funcarray(), pix2wcs(), shiftandadd(), and wcs2pix().
.SS "double y (void)"
.PP
Definition at line 602 of file ic.c.
.PP
Referenced by main().
.SS "double yp (void)"
.PP
Definition at line 592 of file ic.c.
.PP
Referenced by cdl_doCircleMark(), cdl_doEllipseMark(), cdl_doPointMark(), cdl_doPolygonMark(), contourplot(), cycleimage(), eqstrn(), func(), main(), makemodel(), num0funcarray(), pix2wcs(), shiftandadd(), and wcs2pix().
.SH "Variable Documentation"
.PP 
.SS "float** f"
.PP
Definition at line 146 of file ic.c.
.SS "int \fBix\fP\fC [static]\fP"
.PP
Definition at line 145 of file ic.c.
.PP
Referenced by main(), x(), and xp().
.SS "int \fBiy\fP\fC [static]\fP"
.PP
Definition at line 145 of file ic.c.
.PP
Referenced by main(), y(), and yp().
.SS "int \fBN1\fP\fC [static]\fP"
.PP
Definition at line 145 of file ic.c.
.SS "int \fBN2\fP\fC [static]\fP"
.PP
Definition at line 145 of file ic.c.
.SS "int \fBnim\fP = 0"
.PP
Definition at line 144 of file ic.c.
.SS "int \fBpos\fP"
.PP
Definition at line 142 of file ic.c.
.PP
Referenced by adddate(), argsToString(), eps_doColorbar(), fk42gal(), fk52gal(), gal2fk4(), gal2fk5(), getangle(), getargd(), getargf(), getargi(), gettextvalue(), getvars(), jpcon(), jpcop(), main(), and nextargtype().
.SS "double* \fBst\fP[STACK_DEPTH]"
.PP
Definition at line 141 of file ic.c.
.PP
Referenced by main(), printoption(), and skiplines().
.SH "Author"
.PP 
Generated automatically by Doxygen for imcat from the source code.
